/*
 * PrintPreviewPanel.java
 *
 * Created on September 27, 2006, 8:33 AM
 */

package sjq.print;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.awt.print.*;
import java.util.TimerTask;
import javax.print.attribute.*;
import rmischedule.main.Main_Window;
import sjq.print.BlockingWindow;

/**
 * A panel used to display a print preview as a part of our new printing API.
 *
 * @author  shawn
 */
class PrintPreviewPanel extends javax.swing.JPanel {

    private PrintDocument myDocument;
    private int currentPageToPreview;

    private int parentOfApplication;

    /** Creates new form PrintPreviewPanel */
    public PrintPreviewPanel(PrintDocument doc) {
        initComponents();


        this.myDocument = doc;
        this.currentPageToPreview = 0;
        this.documentScrollPane.setViewportView(this.documentPanel);
        this.documentScrollPane.getVerticalScrollBar().setUnitIncrement(20);
        this.documentScrollPane.getViewport().setScrollMode(JViewport.BACKINGSTORE_SCROLL_MODE);
        this.documentScrollPane.getVerticalScrollBar().addAdjustmentListener(new PageAdjustmentListener());
    }

    /**
     * Displays the current document, and sets up the page number combo box.
     */
    public void displayPrintPreview() {
        this.documentPanel.removeAll();
        this.myDocument.setupPages(this);
        synchronized(this.pageComboBox) {
            this.pageComboBox.setActionCommand(null);
            this.pageComboBox.removeAllItems();
            for (int i = 1; i <= this.myDocument.getNumberOfPages(); i++) {
                this.pageComboBox.setActionCommand(null);
                this.pageComboBox.addItem(new Integer(i));
            }
        }
        this.maxPageLabel.setText(this.myDocument.getNumberOfPages() +"");

        //If the page's height is less than the viewport's height, add some padding to the end of the document panel
        //so that the top of the last page will be able to be scrolled to the top of the viewport.  This is necessary
        //to get the current page indicator to work for varying page sizes.
        int offset = this.documentScrollPane.getViewport().getHeight() - this.documentPanel.getComponent(0).getHeight() - 20;
        if(offset > 0) {
            this.documentPanel.add(Box.createRigidArea(new Dimension(20, offset)));
            this.documentPanel.validate();
        }

        this.documentScrollPane.repaint();
    }

    void displayPage(PrintPage page) {
        this.documentPanel.add(page);
        this.documentPanel.add(Box.createRigidArea(new Dimension(20, 20)));
        this.documentPanel.validate();
    }

    /**
     * Scrolls the viewport to the given page number.
     *
     * @param   pageNum the page number to scroll to
     */
    void viewPage(int pageNum) {
        PrintPage viewPage = (PrintPage)this.myDocument.getPrintable(pageNum - 1);
        int y = viewPage.getY();
        if(y + this.documentScrollPane.getViewport().getHeight() > this.documentScrollPane.getViewport().getViewSize().height) {
            y = this.documentScrollPane.getViewport().getViewSize().height - this.documentScrollPane.getViewport().getHeight();
        }
        this.documentScrollPane.getViewport().setViewPosition(new Point(0, y));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jProgressBar1 = new javax.swing.JProgressBar();
        controlPanel = new javax.swing.JPanel();
        buttonPanel = new javax.swing.JPanel();
        printButton = new javax.swing.JButton();
        spacerPanel = new javax.swing.JPanel();
        pageSetupButton = new javax.swing.JButton();
        pageLabel = new javax.swing.JLabel();
        firstPageLabel = new javax.swing.JLabel();
        prevPageLabel = new javax.swing.JLabel();
        curPageLabel = new javax.swing.JLabel();
        ofLabel = new javax.swing.JLabel();
        maxPageLabel = new javax.swing.JLabel();
        nextPageLabel = new javax.swing.JLabel();
        lastPageLabel = new javax.swing.JLabel();
        comboLabel = new javax.swing.JLabel();
        pageComboBox = new javax.swing.JComboBox();
        documentScrollPane = new javax.swing.JScrollPane();
        documentPanel = new javax.swing.JPanel();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        controlPanel.setLayout(new javax.swing.BoxLayout(controlPanel, javax.swing.BoxLayout.LINE_AXIS));

        controlPanel.setMaximumSize(new java.awt.Dimension(32767, 23));
        buttonPanel.setLayout(new javax.swing.BoxLayout(buttonPanel, javax.swing.BoxLayout.LINE_AXIS));

        buttonPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
        printButton.setText("Print");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(printButton);

        spacerPanel.setMaximumSize(new java.awt.Dimension(4, 32767));
        spacerPanel.setMinimumSize(new java.awt.Dimension(4, 10));
        spacerPanel.setPreferredSize(new java.awt.Dimension(4, 10));
        buttonPanel.add(spacerPanel);

        pageSetupButton.setText("Page Setup");
        pageSetupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pageSetupButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(pageSetupButton);

        controlPanel.add(buttonPanel);

        pageLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        pageLabel.setText("    Page  ");
        controlPanel.add(pageLabel);

        firstPageLabel.setText("I\u25c4");
        firstPageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                firstPageLabelMouseClicked(evt);
            }
        });

        controlPanel.add(firstPageLabel);

        prevPageLabel.setText("\u25c4 ");
        prevPageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                prevPageLabelMouseClicked(evt);
            }
        });

        controlPanel.add(prevPageLabel);

        curPageLabel.setText("1");
        controlPanel.add(curPageLabel);

        ofLabel.setText(" of ");
        controlPanel.add(ofLabel);

        maxPageLabel.setText("1");
        controlPanel.add(maxPageLabel);

        nextPageLabel.setText(" \u25ba");
        nextPageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextPageLabelMouseClicked(evt);
            }
        });

        controlPanel.add(nextPageLabel);

        lastPageLabel.setText("\u25baI");
        lastPageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lastPageLabelMouseClicked(evt);
            }
        });

        controlPanel.add(lastPageLabel);

        comboLabel.setText("    Page: ");
        controlPanel.add(comboLabel);

        pageComboBox.setMaximumSize(new java.awt.Dimension(50, 18));
        pageComboBox.setMinimumSize(new java.awt.Dimension(50, 18));
        pageComboBox.setPreferredSize(new java.awt.Dimension(50, 18));
        pageComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pageComboBoxActionPerformed(evt);
            }
        });

        controlPanel.add(pageComboBox);

        add(controlPanel);

        documentPanel.setLayout(new javax.swing.BoxLayout(documentPanel, javax.swing.BoxLayout.Y_AXIS));

        documentPanel.setBackground(new java.awt.Color(102, 102, 102));
        documentPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                documentPanelMouseClicked(evt);
            }
        });

        documentScrollPane.setViewportView(documentPanel);

        add(documentScrollPane);

    }// </editor-fold>//GEN-END:initComponents

    private void documentPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_documentPanelMouseClicked
        Main_Window.parentOfApplication.setEnabled(true);
    }//GEN-LAST:event_documentPanelMouseClicked

    private void pageComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pageComboBoxActionPerformed
        if(evt.getActionCommand() != null && this.pageComboBox.getSelectedIndex() >= 0) {
            this.viewPage(this.pageComboBox.getSelectedIndex() + 1);
        }

        this.pageComboBox.setActionCommand("doAction");
    }//GEN-LAST:event_pageComboBoxActionPerformed

    private void lastPageLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lastPageLabelMouseClicked
        this.viewPage(this.myDocument.getNumberOfPages());
    }//GEN-LAST:event_lastPageLabelMouseClicked

    private void nextPageLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextPageLabelMouseClicked
        int numToLookAt = Integer.parseInt(this.curPageLabel.getText()) + 1;
        if(numToLookAt <= this.myDocument.getNumberOfPages()) {
            this.viewPage(numToLookAt);
        }
    }//GEN-LAST:event_nextPageLabelMouseClicked

    private void prevPageLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_prevPageLabelMouseClicked
        int numToLookAt = this.pageComboBox.getSelectedIndex();
        if(numToLookAt > 0) {
            this.viewPage(numToLookAt);
        }
    }//GEN-LAST:event_prevPageLabelMouseClicked

    private void firstPageLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_firstPageLabelMouseClicked
        this.viewPage(1);
    }//GEN-LAST:event_firstPageLabelMouseClicked

    private void pageSetupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pageSetupButtonActionPerformed
        PrintRequestAttributeSet printAttribs = this.myDocument.getPrintAttributes();
        PageFormat pf = PrinterJob.getPrinterJob().pageDialog(printAttribs);
        if(pf != null) {
            this.myDocument.setPageFormat(pf);
            this.displayPrintPreview();
        }
    }//GEN-LAST:event_pageSetupButtonActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        final PrinterJob printJob = PrinterJob.getPrinterJob();
        final PrintRequestAttributeSet myAttributes = this.myDocument.getPrintAttributes();

        printJob.setPageable(this.myDocument);
        if (printJob.printDialog(myAttributes))
        {
            Thread printThread = new Thread()
            {
                public void run()
                {
                    try
                    {
                        printJob.print(myAttributes);
                    } catch(Exception ex)
                    {
                        ex.printStackTrace();
                    }
                }
            };
            printThread.start();
        int numpage = myDocument.getNumberOfPages();
        muestraBarra(numpage);

        }
    }//GEN-LAST:event_printButtonActionPerformed






    private void printT(java.awt.event.ActionEvent evt) {
        final PrinterJob printJob = PrinterJob.getPrinterJob();
        final PrintRequestAttributeSet myAttributes = this.myDocument.getPrintAttributes();
        if (printJob.printDialog(myAttributes)) {
            Thread printThread = new Thread() {
            };
            printThread.start();
        }
    }


    public void setVisible(boolean b) {
        if(Main_Window.isClosing) {
            super.setVisible(false);
            super.setEnabled(false);
        } else
            super.setVisible(b);
    }


    private void muestraBarra(int numpage) {
        final BlockingWindow progressBar = new BlockingWindow(this);
        progressBar.setVisible(true);
        super.getComponentCount();
        progressBar.pack();
        Thread session = new Thread(new Runnable(){public void run(){progressBar.mandar();}});
        session.start();

        TimerTask task = new TimerTask()
        {
            public void run()
            {
                Main_Window.parentOfApplication.setEnabled(true);
                progressBar.setProgressStatus(0,100,100);
                progressBar.setIndeterminate(false);
                progressBar.dispose();
                this.cancel();
            }
        };
        java.util.Timer timer = new java.util.Timer();
        timer.schedule(task, numpage * 2000);
    }


    private class PageAdjustmentListener implements AdjustmentListener {

        public void adjustmentValueChanged(AdjustmentEvent e) {
            if(documentPanel.getComponentCount() == 0) return;
            try {
                Point currentPoint = documentScrollPane.getViewport().getViewPosition();
                int pageHeight = documentPanel.getComponent(0).getHeight() + 20;
                int curPage = (currentPoint.y+200) / pageHeight;

                if(curPage < pageComboBox.getItemCount()) {
                    curPageLabel.setText((curPage + 1) + "");
                    synchronized(pageComboBox) {
                        pageComboBox.setActionCommand(null);
                        pageComboBox.setSelectedIndex(curPage);
                    }
                }
            } catch(ArithmeticException ex) { }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JLabel comboLabel;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JLabel curPageLabel;
    private javax.swing.JPanel documentPanel;
    private javax.swing.JScrollPane documentScrollPane;
    private javax.swing.JLabel firstPageLabel;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel lastPageLabel;
    private javax.swing.JLabel maxPageLabel;
    private javax.swing.JLabel nextPageLabel;
    private javax.swing.JLabel ofLabel;
    private javax.swing.JComboBox pageComboBox;
    private javax.swing.JLabel pageLabel;
    private javax.swing.JButton pageSetupButton;
    private javax.swing.JLabel prevPageLabel;
    private javax.swing.JButton printButton;
    private javax.swing.JPanel spacerPanel;
    // End of variables declaration//GEN-END:variables

}
