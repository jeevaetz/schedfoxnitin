/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ClientContactNotes.java
 *
 * Created on Mar 7, 2011, 3:39:23 PM
 */
package rmischedule.client.constant_contact;

import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import rmischedule.client.components.ClientNoteInterface;
import rmischedule.components.graphicalcomponents.GenericEditSubForm;
import rmischedule.components.graphicalcomponents.GraphicalNoteClass;
import rmischedule.main.Main_Window;
import rmischeduleserver.control.ClientController;
import rmischeduleserver.control.GenericController;
import schedfoxlib.model.util.Record_Set;
import rmischeduleserver.mysqlconnectivity.queries.GeneralQueryFormat;
import rmischeduleserver.mysqlconnectivity.queries.client.client_note_list_prep_query;
import schedfoxlib.model.ClientNotes;
import schedfoxlib.model.NoteInterface;

/**
 *
 * @author user
 */
public class ClientContactNotes extends GenericEditSubForm implements ClientNoteInterface {

    private ArrayList<GraphicalNoteClass> myNotes;

    /**
     * Creates new form ClientContactNotes
     */
    public ClientContactNotes() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        noteListContainer = new javax.swing.JPanel();
        HeaderPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        NoteListScroll = new javax.swing.JScrollPane();
        NoteList = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        NoteTxt = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        noteListContainer.setMaximumSize(new java.awt.Dimension(50000, 250));
        noteListContainer.setMinimumSize(new java.awt.Dimension(0, 200));
        noteListContainer.setPreferredSize(new java.awt.Dimension(0, 200));
        noteListContainer.setLayout(new javax.swing.BoxLayout(noteListContainer, javax.swing.BoxLayout.Y_AXIS));

        HeaderPanel.setMaximumSize(new java.awt.Dimension(10000, 20));
        HeaderPanel.setMinimumSize(new java.awt.Dimension(0, 20));
        HeaderPanel.setPreferredSize(new java.awt.Dimension(0, 20));
        HeaderPanel.setLayout(new javax.swing.BoxLayout(HeaderPanel, javax.swing.BoxLayout.LINE_AXIS));

        jLabel1.setFont(new java.awt.Font("Microsoft Sans Serif", 3, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(6, 28, 111));
        jLabel1.setText(" Click on a note to display contents.");
        HeaderPanel.add(jLabel1);

        noteListContainer.add(HeaderPanel);

        NoteList.setLayout(new javax.swing.BoxLayout(NoteList, javax.swing.BoxLayout.Y_AXIS));
        NoteListScroll.setViewportView(NoteList);

        noteListContainer.add(NoteListScroll);

        add(noteListContainer);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Add A New Note"));
        jPanel2.setMaximumSize(new java.awt.Dimension(32767, 140));
        jPanel2.setMinimumSize(new java.awt.Dimension(10, 140));
        jPanel2.setPreferredSize(new java.awt.Dimension(10, 140));
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

        jScrollPane1.setViewportView(NoteTxt);

        jPanel2.add(jScrollPane1);

        jPanel3.setMaximumSize(new java.awt.Dimension(32767, 20));
        jPanel3.setMinimumSize(new java.awt.Dimension(10, 20));
        jPanel3.setPreferredSize(new java.awt.Dimension(10, 20));
        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jButton2.setText("ADD NOTE");
        jButton2.setMaximumSize(new java.awt.Dimension(140, 20));
        jButton2.setMinimumSize(new java.awt.Dimension(140, 20));
        jButton2.setPreferredSize(new java.awt.Dimension(140, 20));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2);

        jPanel2.add(jPanel3);

        add(jPanel2);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (NoteTxt.getText().trim().length() > 0) {
            saveNote();
            NoteTxt.setText("");
        }
}//GEN-LAST:event_jButton2ActionPerformed

    public void saveNote() {
        if (myparent.getSelectedObject() == null) {
            return;
        }
        save();
    }

    public void reloadData() {
        GeneralQueryFormat query = getQuery(true);
        Record_Set data = this.myparent.getConnection().executeQuery(query);
        this.loadData(data);
        this.revalidate();
        this.repaint();
    }

    @Override
    public GeneralQueryFormat getQuery(boolean isSelected) {
        client_note_list_prep_query cnlq = new client_note_list_prep_query();
        cnlq.setPreparedStatement(new Object[]{Integer.parseInt(myparent.getMyIdForSave())});
        return cnlq;
    }

    @Override
    public GeneralQueryFormat getSaveQuery(boolean isNewData) {
        return null;
    }

    protected NoteInterface loadNote(Record_Set rs) {
        return new ClientNotes(rs);
    }

    @Override
    public void loadData(Record_Set rs) {
        NoteList.removeAll();
        myNotes = new ArrayList<GraphicalNoteClass>();
        for (int i = 0; i < rs.length(); i++) {
            GraphicalNoteClass myNewNote = new GraphicalNoteClass(loadNote(rs), this, myparent.getConnection().myCompany);
            myNotes.add(myNewNote);
            NoteList.add(myNewNote);
            rs.moveNext();
        }
    }

    @Override
    public boolean needsMoreRecordSets() {
        return false;
    }

    @Override
    public String getMyTabTitle() {
        return "Call Notes";
    }

    @Override
    public JPanel getMyForm() {
        return this;
    }

    @Override
    public void doOnClear() {
    }

    @Override
    public boolean userHasAccess() {
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel HeaderPanel;
    protected javax.swing.JPanel NoteList;
    private javax.swing.JScrollPane NoteListScroll;
    protected javax.swing.JTextArea NoteTxt;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel noteListContainer;
    // End of variables declaration//GEN-END:variables

    public void save() {
        try {
            ClientNotes clientNote = new ClientNotes();
            clientNote.setClientId(Integer.parseInt(myparent.getMyIdForSave()));
            clientNote.setClientNotesDateTime(new Date(GenericController.getInstance("2").getCurrentTimeMillis()));
            clientNote.setClientNotesNotes(NoteTxt.getText().trim());
            clientNote.setNoteTypeId(-4);
            clientNote.setReadOnCheckin(false);
            clientNote.setUserId(Integer.parseInt(Main_Window.parentOfApplication.getUser().getUserId()));
            ClientController clientController = ClientController.getInstance(myparent.getConnection().myCompany);
            clientController.saveClientNote(clientNote);
        } catch (Exception exe) {
            exe.printStackTrace();
        }

        this.reloadData();
    }

    @Override
    public void deleteNote(NoteInterface note) {
        try {
            if (JOptionPane.showConfirmDialog(myparent, "Do you want to delete this note permanently?", "Delete Note?",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                ClientController clientController = ClientController.getInstance(myparent.getConnection().myCompany);
                clientController.deleteClientNote((ClientNotes) note);
                reloadData();
            }
        } catch (Exception exe) {
            exe.printStackTrace();
        }
    }

    @Override
    public void saveNote(NoteInterface note) {
        try {
            ClientController clientController = ClientController.getInstance(myparent.getConnection().myCompany);
            clientController.saveClientNote((ClientNotes) note);
            reloadData();
        } catch (Exception exe) {
            exe.printStackTrace();
        }
    }
}
