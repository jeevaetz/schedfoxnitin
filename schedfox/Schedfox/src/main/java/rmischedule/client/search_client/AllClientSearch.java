/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rmischedule.client.search_client;

import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import rmischedule.client.components.DisplayClientSearchInfoPanel;
import rmischedule.main.Main_Window;
import rmischeduleserver.control.ClientController;
import schedfoxlib.model.Client;

/**
 *
 * @author ira
 */
public class AllClientSearch extends javax.swing.JDialog {

    private ArrayList<Client> clients;
    private SearchClientTableModel tableModel = new SearchClientTableModel();
    private String companyId;
    
    /**
     * Creates new form AllClientSearch
     */
    public AllClientSearch(java.awt.Frame parent, boolean modal, String companyId) {
        super(parent, modal);
        initComponents();
        
        this.companyId = companyId;
        resultsTable.setDefaultRenderer(Client.class, new ClientCellRenderer());
        
        try {
            ClientController clientController = ClientController.getInstance(companyId);
            clients = clientController.getActiveClients();
            clientController.loadContactInformationForClients(clients);

            tableModel.setData(clients);
            clientCountLabel.setText(clients.size() + " clients match.");
        } catch (Exception exe) {
            exe.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        searchText = new javax.swing.JTextField();
        clientCountLabel = new javax.swing.JLabel();
        resultsPanel = new javax.swing.JPanel();
        resultsScrollPanel = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("\"Client Search\"");
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        searchPanel.setMaximumSize(new java.awt.Dimension(32767, 45));
        searchPanel.setPreferredSize(new java.awt.Dimension(576, 45));
        searchPanel.setLayout(new javax.swing.BoxLayout(searchPanel, javax.swing.BoxLayout.LINE_AXIS));

        jLabel1.setText("Enter in search terms");
        jLabel1.setMaximumSize(new java.awt.Dimension(135, 16));
        jLabel1.setMinimumSize(new java.awt.Dimension(135, 16));
        jLabel1.setPreferredSize(new java.awt.Dimension(135, 16));
        searchPanel.add(jLabel1);

        searchText.setMaximumSize(new java.awt.Dimension(2147483647, 26));
        searchText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextKeyReleased(evt);
            }
        });
        searchPanel.add(searchText);

        clientCountLabel.setMaximumSize(new java.awt.Dimension(120, 16));
        clientCountLabel.setMinimumSize(new java.awt.Dimension(120, 16));
        clientCountLabel.setPreferredSize(new java.awt.Dimension(120, 16));
        searchPanel.add(clientCountLabel);

        getContentPane().add(searchPanel);

        resultsPanel.setLayout(new java.awt.GridLayout(1, 0));

        resultsTable.setModel(tableModel);
        resultsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultsTableMouseClicked(evt);
            }
        });
        resultsScrollPanel.setViewportView(resultsTable);

        resultsPanel.add(resultsScrollPanel);

        getContentPane().add(resultsPanel);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-765)/2, (screenSize.height-587)/2, 765, 587);
    }// </editor-fold>//GEN-END:initComponents

    private void searchTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextKeyReleased
        ArrayList<Client> searchedClients = new ArrayList<Client>();
        for (int c = 0; c < clients.size(); c++) {
            if (clients.get(c).contains(searchText.getText())) {
                searchedClients.add(clients.get(c));
            }
        }
        clientCountLabel.setText(searchedClients.size() + " clients match.");
        tableModel.setData(searchedClients);
    }//GEN-LAST:event_searchTextKeyReleased

    private void resultsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultsTableMouseClicked
        if (evt.getClickCount() == 2) {
            Client selectedClient = tableModel.getClient(resultsTable.getSelectedRow());
            Main_Window.getClientEditWindow().clearList();
            try {
                Main_Window.getClientEditWindow().getListOfObjects().clear();
            } catch (Exception exe) {}
            Main_Window.getClientEditWindow().setInformation(this.companyId, selectedClient.getBranchId() + "", false);
            Main_Window.getClientEditWindow().setVisible(true);
            Main_Window.getClientEditWindow().setSelected(selectedClient);
        }
    }//GEN-LAST:event_resultsTableMouseClicked

    private class SearchClientTableModel extends AbstractTableModel {

        private ArrayList<Client> clients;
        
        public SearchClientTableModel() {
            clients = new ArrayList<Client>();
        }
        
        public void setData(ArrayList<Client> clients) {
            this.clients = clients;
            super.fireTableDataChanged();
            
            for (int c = 0; c < clients.size(); c++) {
                resultsTable.setRowHeight(c, 36 + (clients.get(c).getContactsWOFetch().size() * 16));
            }
        }
        
        public Client getClient(int row) {
            return clients.get(row);
        }
        
        public void clear() {
            clients = new ArrayList<Client>();
            super.fireTableDataChanged();
        }
        
        public int getRowCount() {
            return clients.size();
        }

        public int getColumnCount() {
            return 1;
        }

        @Override
        public Class getColumnClass(int columnIndex) {
            return Client.class;
        }
        
        public Object getValueAt(int rowIndex, int columnIndex) {
            return clients.get(rowIndex);
        }
        
        @Override
        public String getColumnName(int column) {
            return "Client Info";
        }
    }
    
    private class ClientCellRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,int row,int col) {
            return new DisplayClientSearchInfoPanel((Client)value, searchText.getText());
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel clientCountLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JScrollPane resultsScrollPanel;
    private javax.swing.JTable resultsTable;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField searchText;
    // End of variables declaration//GEN-END:variables
}
