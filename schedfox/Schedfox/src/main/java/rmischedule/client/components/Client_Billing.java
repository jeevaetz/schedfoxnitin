/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Client_Billing.java
 *
 * Created on Mar 15, 2011, 4:19:24 PM
 */
package rmischedule.client.components;

import java.awt.Component;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import rmischedule.billing.AddEditSalesTaxDialog;
import rmischedule.billing.ClientContractModel;
import rmischedule.billing.ClientInvoiceModel;
import rmischedule.billing.EditRateCodeDialog;
import rmischedule.billing.RateCodeModel;
import rmischedule.client.xClientEdit;
import rmischedule.components.graphicalcomponents.GenericEditSubForm;
import schedfoxlib.model.Company;
import rmischedule.main.Main_Window;
import rmischeduleserver.control.BillingController;
import rmischeduleserver.control.ClientController;
import schedfoxlib.model.util.Record_Set;
import schedfoxlib.model.Client;
import schedfoxlib.model.ClientBillFrequency;
import schedfoxlib.model.ClientBilling;
import schedfoxlib.model.ClientContract;
import schedfoxlib.model.ClientInvoice;
import schedfoxlib.model.ClientRateCode;
import schedfoxlib.model.SalesTax;
import rmischeduleserver.mysqlconnectivity.queries.GeneralQueryFormat;
import rmischeduleserver.mysqlconnectivity.queries.billing.save_billing_query;
import rmischeduleserver.mysqlconnectivity.queries.client.billing.get_client_billing_query;
import schedfoxlib.model.util.FileLoader;

/**
 *
 * @author user
 */
public class Client_Billing extends GenericEditSubForm {

    private xClientEdit myParent;
    private RateCodeModel<ClientRateCode> rateCodeModel;
    private ClientContractModel contractModel;
    private ClientInvoiceModel invoiceModel;

    /** Creates new form Client_Billing */
    public Client_Billing(xClientEdit myParent) {
        try {
            this.rateCodeModel = new RateCodeModel<ClientRateCode>(Integer.parseInt(myParent.getConnection().myCompany));
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            this.invoiceModel = new ClientInvoiceModel();
        } catch (Exception e) {}
        Company myCompany = Main_Window.parentOfApplication.getCompanyById(myParent.getConnection().myCompany);

        try {
            this.contractModel = new ClientContractModel(Integer.parseInt(myCompany.getId()), myCompany.getDB());
        } catch (Exception e) {
            e.printStackTrace();
        }
        initComponents();
        this.myParent = myParent;

        this.contractTable.getColumnModel().getColumn(6).setCellRenderer(new openFileRenderer());
    }

    public boolean hasChanged() {
        return false;
    }

    private RateCodeModel getRateCodeModel() {
        return this.rateCodeModel;
    }

    private ClientContractModel getClientContractModel() {
        return this.contractModel;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        informationPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        billableChkBox = new javax.swing.JCheckBox();
        overtimeChkBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        frequencyCombo = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        salesTaxCombo = new javax.swing.JComboBox();
        addEditSalesTaxBtn = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        clientRateCodesPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rateCodeTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        deleteRateBtn = new javax.swing.JButton();
        rateCodeBtn = new javax.swing.JButton();
        clientRateCodesPanel1 = new javax.swing.JPanel();
        renewalScrollPane = new javax.swing.JScrollPane();
        contractTable = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        deleteContractBtn = new javax.swing.JButton();
        addContractBtn = new javax.swing.JButton();
        clientInvoicesPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        invoicesScrollPanel = new javax.swing.JScrollPane();
        invoicesTable = new javax.swing.JTable();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        informationPanel.setMaximumSize(new java.awt.Dimension(2000, 75));
        informationPanel.setMinimumSize(new java.awt.Dimension(0, 75));
        informationPanel.setPreferredSize(new java.awt.Dimension(597, 75));
        informationPanel.setLayout(new java.awt.GridLayout(0, 1));

        jPanel4.setMaximumSize(new java.awt.Dimension(32767, 200));
        jPanel4.setMinimumSize(new java.awt.Dimension(0, 20));
        jPanel4.setPreferredSize(new java.awt.Dimension(100, 20));
        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.LINE_AXIS));

        billableChkBox.setText("Client Is Billable");
        billableChkBox.setMaximumSize(new java.awt.Dimension(150, 18));
        billableChkBox.setPreferredSize(new java.awt.Dimension(150, 18));
        jPanel4.add(billableChkBox);

        overtimeChkBox.setText("Bill For Overtime");
        overtimeChkBox.setMaximumSize(new java.awt.Dimension(150, 18));
        overtimeChkBox.setPreferredSize(new java.awt.Dimension(150, 18));
        jPanel4.add(overtimeChkBox);

        jLabel1.setText("Bill Frequency");
        jLabel1.setMaximumSize(new java.awt.Dimension(90, 16));
        jLabel1.setMinimumSize(new java.awt.Dimension(90, 16));
        jLabel1.setPreferredSize(new java.awt.Dimension(90, 16));
        jPanel4.add(jLabel1);

        frequencyCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        frequencyCombo.setMaximumSize(new java.awt.Dimension(32767, 28));
        frequencyCombo.setMinimumSize(new java.awt.Dimension(64, 28));
        frequencyCombo.setPreferredSize(new java.awt.Dimension(64, 28));
        jPanel4.add(frequencyCombo);

        informationPanel.add(jPanel4);

        jPanel5.setMaximumSize(new java.awt.Dimension(32767, 200));
        jPanel5.setMinimumSize(new java.awt.Dimension(0, 20));
        jPanel5.setPreferredSize(new java.awt.Dimension(100, 20));
        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.LINE_AXIS));

        jLabel2.setText("Sales Tax ");
        jLabel2.setMaximumSize(new java.awt.Dimension(65, 16));
        jLabel2.setMinimumSize(new java.awt.Dimension(65, 16));
        jLabel2.setPreferredSize(new java.awt.Dimension(65, 16));
        jPanel5.add(jLabel2);

        salesTaxCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        salesTaxCombo.setMaximumSize(new java.awt.Dimension(32767, 28));
        salesTaxCombo.setMinimumSize(new java.awt.Dimension(64, 28));
        salesTaxCombo.setPreferredSize(new java.awt.Dimension(64, 28));
        jPanel5.add(salesTaxCombo);

        addEditSalesTaxBtn.setText("Add/Edit Sales Tax");
        addEditSalesTaxBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEditSalesTaxBtnActionPerformed(evt);
            }
        });
        jPanel5.add(addEditSalesTaxBtn);

        informationPanel.add(jPanel5);

        add(informationPanel);

        clientRateCodesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Client Rate Codes"));
        clientRateCodesPanel.setLayout(new javax.swing.BoxLayout(clientRateCodesPanel, javax.swing.BoxLayout.Y_AXIS));

        rateCodeTable.setModel(getRateCodeModel());
        rateCodeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rateCodeTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(rateCodeTable);

        clientRateCodesPanel.add(jScrollPane1);

        jPanel3.setMaximumSize(new java.awt.Dimension(32767, 30));
        jPanel3.setMinimumSize(new java.awt.Dimension(10, 30));
        jPanel3.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        deleteRateBtn.setText("Delete Rate Code");
        deleteRateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRateBtnActionPerformed(evt);
            }
        });
        jPanel3.add(deleteRateBtn);

        rateCodeBtn.setText("Add New Rate Code");
        rateCodeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rateCodeBtnActionPerformed(evt);
            }
        });
        jPanel3.add(rateCodeBtn);

        clientRateCodesPanel.add(jPanel3);

        jTabbedPane1.addTab("Rate Codes", clientRateCodesPanel);

        clientRateCodesPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Client Contract Renewal"));
        clientRateCodesPanel1.setLayout(new javax.swing.BoxLayout(clientRateCodesPanel1, javax.swing.BoxLayout.Y_AXIS));

        contractTable.setModel(getClientContractModel());
        contractTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                contractTableMouseClicked(evt);
            }
        });
        renewalScrollPane.setViewportView(contractTable);

        clientRateCodesPanel1.add(renewalScrollPane);

        jPanel6.setMaximumSize(new java.awt.Dimension(32767, 30));
        jPanel6.setMinimumSize(new java.awt.Dimension(10, 30));
        jPanel6.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        deleteContractBtn.setText("Delete Contract");
        deleteContractBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteContractBtnActionPerformed(evt);
            }
        });
        jPanel6.add(deleteContractBtn);

        addContractBtn.setText("Add New Contract");
        addContractBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addContractBtnActionPerformed(evt);
            }
        });
        jPanel6.add(addContractBtn);

        clientRateCodesPanel1.add(jPanel6);

        jTabbedPane1.addTab("Contracts", clientRateCodesPanel1);

        clientInvoicesPanel.setLayout(new javax.swing.BoxLayout(clientInvoicesPanel, javax.swing.BoxLayout.Y_AXIS));

        jPanel1.setLayout(new java.awt.GridLayout());

        invoicesTable.setModel(invoiceModel);
        invoicesScrollPanel.setViewportView(invoicesTable);

        jPanel1.add(invoicesScrollPanel);

        clientInvoicesPanel.add(jPanel1);

        jTabbedPane1.addTab("Invoices", clientInvoicesPanel);

        add(jTabbedPane1);
    }// </editor-fold>//GEN-END:initComponents

    private void addEditSalesTaxBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEditSalesTaxBtnActionPerformed
        AddEditSalesTaxDialog editSalesDialog = new AddEditSalesTaxDialog(
                Main_Window.parentOfApplication, true, Integer.parseInt(myParent.getConnection().myCompany));
        editSalesDialog.setVisible(true);
        super.reloadData();
    }//GEN-LAST:event_addEditSalesTaxBtnActionPerformed

    private void rateCodeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rateCodeBtnActionPerformed
        Client selectedClient = (Client) myParent.getSelectedObject();
        EditRateCodeDialog<ClientRateCode> editRateCode = new EditRateCodeDialog<ClientRateCode>(Main_Window.parentOfApplication,
                true, myparent.getConnection().myCompany, selectedClient.getClientId(), new ClientRateCode());
        editRateCode.setVisible(true);
        ClientRateCode myCode = editRateCode.getRateCode();
        myCode.setClientId(selectedClient.getClientId());
        BillingController billingController = BillingController.getInstance(myParent.getConnection().myCompany);
        try {
            billingController.saveClientRateCode(myCode);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(Main_Window.parentOfApplication,
                    "Could not save rate code!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        super.reloadData();
    }//GEN-LAST:event_rateCodeBtnActionPerformed

    private void rateCodeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rateCodeTableMouseClicked
        if (evt.getClickCount() > 1) {
            Client selectedClient = (Client) myParent.getSelectedObject();
            EditRateCodeDialog<ClientRateCode> editRateCode = new EditRateCodeDialog<ClientRateCode>(Main_Window.parentOfApplication,
                    true, myparent.getConnection().myCompany, selectedClient.getClientId(), new ClientRateCode());
            editRateCode.loadDataForRateCode(rateCodeModel.getClientRateCode(rateCodeTable.getSelectedRow()));
            editRateCode.setVisible(true);

            ClientRateCode myCode = editRateCode.getRateCode();
            if (myCode != null) {
                myCode.setClientId(selectedClient.getClientId());
                BillingController billingController = BillingController.getInstance(myParent.getConnection().myCompany);
                try {
                    billingController.saveClientRateCode(myCode);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(Main_Window.parentOfApplication,
                            "Could not save rate code!", "Error", JOptionPane.ERROR_MESSAGE);
                }
                super.reloadData();
            }
        }
    }//GEN-LAST:event_rateCodeTableMouseClicked

    private void deleteRateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRateBtnActionPerformed
        try {
            ClientRateCode rateCode = rateCodeModel.getClientRateCode(rateCodeTable.getSelectedRow());
            int response = JOptionPane.showConfirmDialog(Main_Window.parentOfApplication,
                    "Do you want to remove the selected rate code?", "Confirm Delete",
                    JOptionPane.YES_NO_OPTION);
            if (response == JOptionPane.YES_OPTION) {
                BillingController billingController =
                        BillingController.getInstance(myparent.getConnection().myCompany);
                billingController.deleteClientRateCode(rateCode);
                super.reloadData();
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_deleteRateBtnActionPerformed

    private void contractTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contractTableMouseClicked
        try {
            if (evt.getClickCount() > 1) {
                JTable target = (JTable) evt.getSource();
                int row = target.getSelectedRow();
                int column = target.getSelectedColumn();

                if (column == 6) {
                    try {
                        String value = (String)target.getModel().getValueAt(row, column);
                        if (value != null && value.length() > 0) {
                            File file = FileLoader.getFileFromServer(value);
                            Desktop.getDesktop().open(file);
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(Client_Files.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        Logger.getLogger(Client_Files.class.getName()).log(Level.WARNING, null, ex);
                    }
                } else {
                    ClientContract clientContract = contractModel.getClientContract(contractTable.getSelectedRow());
                    ClientContractAddDialog clientContractDialog =
                            new ClientContractAddDialog(Main_Window.parentOfApplication, true, myParent, clientContract);
                    clientContractDialog.setVisible(true);
                    this.reloadData();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_contractTableMouseClicked

    private void addContractBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addContractBtnActionPerformed
        ClientContractAddDialog clientContractDialog =
                new ClientContractAddDialog(Main_Window.parentOfApplication, true, myParent, null);
        clientContractDialog.setVisible(true);
        this.reloadData();
    }//GEN-LAST:event_addContractBtnActionPerformed

    private void deleteContractBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteContractBtnActionPerformed
        int response = JOptionPane.showConfirmDialog(Main_Window.parentOfApplication,
                "Do you want to remove the selected contract?", "Confirm Delete",
                JOptionPane.YES_NO_OPTION);
        try {
            if (response == JOptionPane.YES_OPTION) {
                ClientController clientController = ClientController.getInstance(myParent.getConnection().myCompany);
                clientController.deleteClientContract(contractModel.getClientContract(contractTable.getSelectedRow()));
                this.reloadData();
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_deleteContractBtnActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addContractBtn;
    private javax.swing.JButton addEditSalesTaxBtn;
    private javax.swing.JCheckBox billableChkBox;
    private javax.swing.JPanel clientInvoicesPanel;
    private javax.swing.JPanel clientRateCodesPanel;
    private javax.swing.JPanel clientRateCodesPanel1;
    private javax.swing.JTable contractTable;
    private javax.swing.JButton deleteContractBtn;
    private javax.swing.JButton deleteRateBtn;
    private javax.swing.JComboBox frequencyCombo;
    private javax.swing.JPanel informationPanel;
    private javax.swing.JScrollPane invoicesScrollPanel;
    private javax.swing.JTable invoicesTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JCheckBox overtimeChkBox;
    private javax.swing.JButton rateCodeBtn;
    private javax.swing.JTable rateCodeTable;
    private javax.swing.JScrollPane renewalScrollPane;
    private javax.swing.JComboBox salesTaxCombo;
    // End of variables declaration//GEN-END:variables

    @Override
    public GeneralQueryFormat getQuery(boolean isSelected) {
        get_client_billing_query getClientBilling = new get_client_billing_query();
        try {
            getClientBilling.update(((Client) myparent.getSelectedObject()).getClientId());
        } catch (Exception e) {
            e.printStackTrace();
        }
        return getClientBilling;
    }

    private ClientBilling getClientBillingObject() {
        ClientBilling retVal = new ClientBilling();
        try {
            retVal.setClientBillFrequencyId(((ClientBillFrequency) frequencyCombo.getSelectedItem()).getClientBillFrequencyId());
            retVal.setClientId(((Client) myparent.getSelectedObject()).getClientId());
            retVal.setClientIsBillable(billableChkBox.isSelected());
            retVal.setSalesTaxId(((SalesTax) salesTaxCombo.getSelectedItem()).getSalesTaxId());
            retVal.setBillOvertime(overtimeChkBox.isSelected());
        } catch (Exception e) {
        }
        return retVal;
    }

    @Override
    public GeneralQueryFormat getSaveQuery(boolean isNewData) {
        save_billing_query mySaveQuery = new save_billing_query();
        mySaveQuery.update(getClientBillingObject());
        return mySaveQuery;
    }

    private void loadFrequencies() {
        try {
            frequencyCombo.removeAllItems();
            ClientBillFrequency unselectedFrequency = new ClientBillFrequency();
            unselectedFrequency.setClientBillFrequencyId(-1);
            unselectedFrequency.setFrequency("Select a frequency");
            frequencyCombo.addItem(unselectedFrequency);

            BillingController billingController =
                    BillingController.getInstance(myparent.getConnection().myCompany);
            ArrayList<ClientBillFrequency> myTaxes = billingController.getBillingFrequencies();
            for (int r = 0; r < myTaxes.size(); r++) {
                frequencyCombo.addItem(myTaxes.get(r));
            }
        } catch (Exception e) {
        }
    }

    private void loadSalesTax() {
        try {
            salesTaxCombo.removeAllItems();
            SalesTax unselectedTax = new SalesTax();
            unselectedTax.setSalesTaxId(-1);
            unselectedTax.setSalesTax("Please select a sales tax if applicable");
            salesTaxCombo.addItem(unselectedTax);

            BillingController billingController =
                    BillingController.getInstance(myparent.getConnection().myCompany);
            ArrayList<SalesTax> myTaxes = billingController.getSalesTax();
            for (int r = 0; r < myTaxes.size(); r++) {
                salesTaxCombo.addItem(myTaxes.get(r));
            }
        } catch (Exception e) {
        }
    }

    private void loadClientRateCode() {
        try {
            Client selectedClient = (Client) myParent.getSelectedObject();
            BillingController billingController =
                    BillingController.getInstance(myparent.getConnection().myCompany);
            ArrayList<ClientRateCode> clientRateCodes =
                    billingController.getClientRateCodes(selectedClient.getClientId());
            rateCodeModel.clearData();
            for (int cr = 0; cr < clientRateCodes.size(); cr++) {
                this.rateCodeModel.addRateCode(clientRateCodes.get(cr));
            }
        } catch (Exception e) {
        }
    }

    public void loadInvoices() {
        try {
            Client selectedClient = (Client) myParent.getSelectedObject();

            ClientController clientController = ClientController.getInstance(myParent.getConnection().myCompany);
            ArrayList<ClientInvoice> clientInvoices = clientController.getClientInvoices(selectedClient.getClientId());
            invoiceModel.clearData();

            for (int c = 0; c < clientInvoices.size(); c++) {
                invoiceModel.addInvoice(clientInvoices.get(c));
            }
        } catch (Exception e) {

        }
    }

    public void loadContractData() {
        try {
            Client selectedClient = (Client) myParent.getSelectedObject();

            ClientController clientController = ClientController.getInstance(myParent.getConnection().myCompany);
            ArrayList<ClientContract> clientContracts = clientController.getClientContract(selectedClient.getClientId());
            contractModel.clearData();

            for (int c = 0; c < clientContracts.size(); c++) {
                contractModel.addClientContract(clientContracts.get(c));
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void loadData(Record_Set rs) {
        this.loadFrequencies();
        this.loadSalesTax();
        this.loadClientRateCode();
        this.loadContractData();
        this.loadInvoices();
        try {
            SalesTax selectedTax = new SalesTax();
            selectedTax.setSalesTaxId(rs.getInt("sales_tax_id"));

            ClientBillFrequency billFrequency = new ClientBillFrequency();
            billFrequency.setClientBillFrequencyId(rs.getInt("client_bill_frequency_id"));

            billableChkBox.setSelected(rs.getBoolean("client_is_billable"));
            overtimeChkBox.setSelected(rs.getBoolean("bill_overtime"));
            salesTaxCombo.setSelectedItem(selectedTax);
            frequencyCombo.setSelectedItem(billFrequency);
        } catch (Exception e) {
        }
    }

    @Override
    public boolean needsMoreRecordSets() {
        return false;
    }

    @Override
    public String getMyTabTitle() {
        return "Billing";
    }

    @Override
    public JPanel getMyForm() {
        return this;
    }

    @Override
    public void doOnClear() {
        billableChkBox.setSelected(true);
        salesTaxCombo.setSelectedIndex(-1);
        frequencyCombo.setSelectedIndex(-1);
    }

    @Override
    public boolean userHasAccess() {
        return true;
    }

    private class openFileRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, final Object value,
                boolean isSelected, boolean hasFocus,
                int row, int column) {

            JLabel iconLabel = new JLabel();
            if (value != null) {
                iconLabel.setIcon(Main_Window.Edit_Notes_Icon);
                iconLabel.setHorizontalAlignment(JLabel.CENTER);
            }
            return iconLabel;
        }
    }
}
