/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rmischedule.client.components;

import java.util.ArrayList;
import javax.swing.JPanel;
import rmischedule.client.xClientEdit;
import rmischedule.components.graphicalcomponents.GenericEditSubForm;
import rmischeduleserver.mysqlconnectivity.queries.GeneralQueryFormat;
import rmischeduleserver.mysqlconnectivity.queries.util.GenericQuery;
import schedfoxlib.controller.OfficerDailyReportControllerInterface;
import schedfoxlib.controller.registry.ControllerRegistryAbstract;
import schedfoxlib.model.Client;
import schedfoxlib.model.OfficerDailyReport;
import schedfoxlib.model.util.Record_Set;

/**
 *
 * @author user
 */
public class ClientOfficerDailyReports extends GenericEditSubForm {

    private OfficerDailyReportTableModel officerModel = new OfficerDailyReportTableModel();
    private xClientEdit main;
    
    /**
     * Creates new form ClientOfficerDailyReports
     */
    public ClientOfficerDailyReports(xClientEdit main) {
        initComponents();
        
        this.main = main;
        this.officerTable.setModel(officerModel);
    }

    @Override
    public GeneralQueryFormat getQuery(boolean isSelected) {
        try {
            Client selClient = (Client)main.getSelectedObject();
            OfficerDailyReportControllerInterface officerInterface = ControllerRegistryAbstract.getOfficerDailyReportController(originalLoadString);
            ArrayList<OfficerDailyReport> clientReports = officerInterface.getDailyReportsForClient(selClient.getClientId());
            for (int cr = 0; cr < clientReports.size(); cr++) {
                officerModel.addOfficerReport(clientReports.get(cr));
            }
        } catch (Exception exe) {}
        return new GenericQuery("Select NOW();");
    }

    @Override
    public GeneralQueryFormat getSaveQuery(boolean isNewData) {
        return new GenericQuery("Select NOW();");
    }

    @Override
    public void loadData(Record_Set rs) {
        officerModel.setCompany(main.getConnection().myCompany);
    }

    @Override
    public boolean needsMoreRecordSets() {
        return false;
    }

    @Override
    public String getMyTabTitle() {
        return "ODR";
    }

    @Override
    public JPanel getMyForm() {
        return this;
    }

    @Override
    public void doOnClear() {
        
    }

    @Override
    public boolean userHasAccess() {
        return true;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        officerTable = new javax.swing.JTable();

        setLayout(new java.awt.GridLayout(1, 0));

        officerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(officerTable);

        add(jScrollPane1);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable officerTable;
    // End of variables declaration//GEN-END:variables

}
