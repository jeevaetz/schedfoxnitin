/*
 * Client_Bannination.java
 *
 * Created on May 24, 2005, 9:42 AM
 */

package rmischedule.client.components;

import java.io.InputStream;
import java.text.DateFormat;
import java.util.*;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import rmischedule.components.graphicalcomponents.*;
import rmischedule.client.*;
import rmischedule.security.*;
import rmischedule.main.*;
import rmischedule.components.List_View;
import rmischedule.ireports.viewer.IReportViewer;
import rmischedule.xprint.data.xGenericReportData;
import rmischedule.xprint.templates.genericreportcomponents.formatterClass;
import rmischeduleserver.mysqlconnectivity.queries.client.client_employees_banned_list_query;
import rmischeduleserver.mysqlconnectivity.queries.employee.ban_employees_for_client_update;
import rmischeduleserver.mysqlconnectivity.queries.*;
import schedfoxlib.model.util.Record_Set;
import schedfoxlib.model.Client;
/**
 *
 * @author  ira
 */
public class Client_Bannination extends GenericEditSubForm {
    
    private List_View myListView;
    private Record_Set rs;
    private xClientEdit myparent;
    
    /** Creates new form Client_Bannination */
    public Client_Bannination(xClientEdit myParent) {
        initComponents();
        myparent = myParent;
        rs = new Record_Set();
        myListView = new List_View();
        myListView.addColumn("EmpId", myListView.STRING, false, false);
        myListView.addColumn("Employee Last Name", myListView.STRING, false);
        myListView.addColumn("Employee First Name", myListView.STRING, false);
        myListView.addColumn("Employee Phone", myListView.STRING, false);
        myListView.addColumn("Employee Banned", myListView.BOOLEAN, true);
        myListView.buildTable();
        myListView.maximizeTable();
        registerListView(myListView);
        add(myListView.myScrollPane, java.awt.BorderLayout.CENTER);
    }
    
    public GeneralQueryFormat getSaveQuery(boolean isNewData) {
        ban_employees_for_client_update myUpdateQuery = new ban_employees_for_client_update();
        ArrayList mySelectedEmps = new ArrayList();
        for (int i = 0; i < myListView.getRowCount(); i++) {
            if (((Boolean)myListView.getValueAt(i, 3))) {
                mySelectedEmps.add(((String)myListView.getTrueValueAt(i, 0))); 
            }
        }
        myUpdateQuery.update(mySelectedEmps, myparent.getMyIdForSave());
        try {
            myparent.getConnection().executeQuery(myUpdateQuery);
        } catch (Exception e) {}
        //Done so that heartbeat invokes properly otherwise will just update schedule...
        return null;
    }
    
    public void loadData(Record_Set rs) {
        myListView.clearRows();
        for (int i = 0; i < rs.length(); i++) {
            myListView.addRow(rs);
            rs.moveNext();
        }
        myListView.fireTableDataChanged();
    }
    
    public boolean needsMoreRecordSets() {
        return false;
    }
    
    public javax.swing.JPanel getMyForm() {
        return this;
    }
    
    public java.lang.String getMyTabTitle() {
        return "Banned";
    }
    
    public void doOnClear() {
        myListView.clearRows();
        myListView.fireTableDataChanged();
    }
    
    public boolean userHasAccess() {
        return Main_Window.mySecurity.checkSecurity(security_detail.MODULES.CLIENT_INFORMATION);
    }
    
    public GeneralQueryFormat getQuery(boolean val) {
        client_employees_banned_list_query myQuery = new client_employees_banned_list_query();
        myQuery.update(myparent.getMyIdForSave(), true);
        return myQuery;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        ControlPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        setBackground(new java.awt.Color(186, 186, 222));
        setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(3, 3, 3, 3)), new javax.swing.border.EtchedBorder()));
        ControlPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jButton1.setText("Print Report");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintReport(evt);
            }
        });

        ControlPanel.add(jButton1);

        add(ControlPanel, java.awt.BorderLayout.SOUTH);

    }
    // </editor-fold>//GEN-END:initComponents

    private void PrintReport(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintReport
        if(myparent.getSelectedObject() ==  null) return;
        
        client_employees_banned_list_query myQuery = new client_employees_banned_list_query();
        myQuery.update(myparent.getMyIdForSave(), false);
        Record_Set records = new Record_Set();
        try {
            records = myparent.getConnection().executeQuery(myQuery);
        } catch (Exception e) {}
        
        String[] columns = {"fname", "lname", "phone"};
        String[] headers = {"Employee Last Name", "Employee First Name", "Employee Phone"};
        
        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);
        Client client = (Client)myparent.getSelectedObject();
        Hashtable<String, formatterClass> formatter = new Hashtable();
            try {
                InputStream reportStream =
                        getClass().getResourceAsStream("/rmischedule/ireports/GenericReport.jasper");

                Hashtable parameters = new Hashtable();
                parameters.put("Title", "Check In Report");
                String[] titles = {"Banned Employee Report for " + Main_Window.parentOfApplication.getCompanyNameById(myparent.cpny) + ", " + Main_Window.parentOfApplication.getBranchNameById(myparent.branch) + " " +
                                                          client.getClientName() + " (" + df.format(Calendar.getInstance().getTime()) + ")"};
                xGenericReportData reportData = new xGenericReportData(records, headers, columns, titles, formatter);

                JasperPrint report = JasperFillManager.fillReport(reportStream, parameters, reportData);
                IReportViewer viewer = new IReportViewer(report);
            Main_Window.parentOfApplication.desktop.add(viewer);
            viewer.showForm();
            } catch (Exception exe) {
                exe.printStackTrace();
            }
    }//GEN-LAST:event_PrintReport
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ControlPanel;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
    
}
