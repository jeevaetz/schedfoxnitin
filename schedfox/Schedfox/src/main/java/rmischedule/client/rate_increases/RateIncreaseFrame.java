/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RateIncreaseFrame.java
 *
 * Created on Jul 25, 2011, 4:33:29 PM
 */
package rmischedule.client.rate_increases;

import java.io.File;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.DataFormat;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import rmischedule.client.components.AddClientNoteDialog;
import schedfoxlib.model.Company;
import rmischedule.main.Main_Window;
import rmischeduleserver.control.BillingController;
import rmischeduleserver.control.ClientController;
import schedfoxlib.model.Client;
import schedfoxlib.model.ClientContact;
import schedfoxlib.model.ClientContract;
import schedfoxlib.model.ClientNotes;
import schedfoxlib.model.ClientRateCode;

/**
 *
 * @author user
 */
public class RateIncreaseFrame extends javax.swing.JInternalFrame {

    private RateIncreaseModel rateIncreaseModel;
    private String companyId;

    /**
     * Creates new form RateIncreaseFrame
     */
    public RateIncreaseFrame(String companyId) {
        Company comp = Main_Window.parentOfApplication.getCompanyById(companyId);
        rateIncreaseModel = new RateIncreaseModel(Integer.parseInt(comp.getId()), comp.getDB());

        this.companyId = companyId;
        initComponents();

        rateIncreaseTable.setAutoCreateRowSorter(true);

        this.reloadData();
    }

    private void reloadData() {
        try {
            ClientController clientController = ClientController.getInstance(companyId);
            ArrayList<ClientContract> contracts = new ArrayList<ClientContract>();
            if (filterCombo.getSelectedIndex() == 1) {
                contracts = clientController.getNoContactClientContract();
            } else if (filterCombo.getSelectedIndex() == 0) {
                contracts = clientController.getContactClientContract();
            } else if (filterCombo.getSelectedIndex() == 2) {
                contracts = clientController.getExpiringClientContract();
            } else {
                contracts = clientController.getAllClientContract();
            }
            rateIncreaseModel.clearData();

            ArrayList<Client> clients = new ArrayList<Client>();
            for (int c = 0; c < contracts.size(); c++) {
                clients.add(contracts.get(c).getClient());
            }
            clientController.loadDMsAssignedToClients(clients);

            for (int c = 0; c < contracts.size(); c++) {
                rateIncreaseModel.addClientContract(contracts.get(c));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlPanel = new javax.swing.JPanel();
        filterCombo = new javax.swing.JComboBox();
        selectUnselectAllChk = new javax.swing.JCheckBox();
        topPanel = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        rateIncreaseTable = new javax.swing.JTable();
        bottomPanel = new javax.swing.JPanel();
        renewBtn = new javax.swing.JButton();
        addNoteBtn = new javax.swing.JButton();
        resolvedBtn = new javax.swing.JButton();
        printLettersBtn = new javax.swing.JButton();
        emailLettersBtn = new javax.swing.JButton();
        exportBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();

        setClosable(true);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        controlPanel.setMaximumSize(new java.awt.Dimension(32767, 35));
        controlPanel.setMinimumSize(new java.awt.Dimension(10, 35));
        controlPanel.setPreferredSize(new java.awt.Dimension(100, 35));
        controlPanel.setLayout(new javax.swing.BoxLayout(controlPanel, javax.swing.BoxLayout.LINE_AXIS));

        filterCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Show clients to contact", "Show clients to not contact", "Show clients with contracts about to renew / expire", "Show all clients" }));
        filterCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterComboActionPerformed(evt);
            }
        });
        controlPanel.add(filterCombo);

        selectUnselectAllChk.setText("Select / Unselect All");
        selectUnselectAllChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectUnselectAllChkActionPerformed(evt);
            }
        });
        controlPanel.add(selectUnselectAllChk);

        getContentPane().add(controlPanel);

        topPanel.setMaximumSize(new java.awt.Dimension(32767, 3000));
        topPanel.setMinimumSize(new java.awt.Dimension(10, 0));
        topPanel.setPreferredSize(new java.awt.Dimension(300, 200));
        topPanel.setLayout(new java.awt.GridLayout(1, 0));

        rateIncreaseTable.setModel(rateIncreaseModel);
        scrollPane.setViewportView(rateIncreaseTable);

        topPanel.add(scrollPane);

        getContentPane().add(topPanel);

        bottomPanel.setMaximumSize(new java.awt.Dimension(32767, 45));
        bottomPanel.setMinimumSize(new java.awt.Dimension(10, 45));
        bottomPanel.setPreferredSize(new java.awt.Dimension(744, 50));

        renewBtn.setText("Mark Renewed");
        renewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewBtnActionPerformed(evt);
            }
        });
        bottomPanel.add(renewBtn);

        addNoteBtn.setText("Add Note");
        addNoteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNoteBtnActionPerformed(evt);
            }
        });
        bottomPanel.add(addNoteBtn);

        resolvedBtn.setText("Mark Do Not Contact");
        resolvedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resolvedBtnActionPerformed(evt);
            }
        });
        bottomPanel.add(resolvedBtn);

        printLettersBtn.setText("Print Letters");
        printLettersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printLettersBtnActionPerformed(evt);
            }
        });
        bottomPanel.add(printLettersBtn);

        emailLettersBtn.setText("EmailLetters");
        emailLettersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailLettersBtnActionPerformed(evt);
            }
        });
        bottomPanel.add(emailLettersBtn);

        exportBtn.setText("Export");
        exportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportBtnActionPerformed(evt);
            }
        });
        bottomPanel.add(exportBtn);

        closeBtn.setText("Close");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });
        bottomPanel.add(closeBtn);

        getContentPane().add(bottomPanel);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-794)/2, (screenSize.height-488)/2, 794, 488);
    }// </editor-fold>//GEN-END:initComponents

    private void renewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renewBtnActionPerformed
        ClientController clientController = ClientController.getInstance(companyId);
        int numberSelected = rateIncreaseTable.getSelectedRows().length;
        if (numberSelected > 0) {
            JOptionPane.showConfirmDialog(Main_Window.parentOfApplication,
                    "Would you like to mark the selected (" + numberSelected + ") contracts as renewed today?",
                    "Renew?", JOptionPane.YES_NO_OPTION);
            int[] selectedContracts = rateIncreaseTable.getSelectedRows();
            for (int c = 0; c < numberSelected; c++) {
                ClientContract contract = this.rateIncreaseModel.getClientContract(selectedContracts[c]);
                clientController.renewContractByDefault(contract);
            }
            this.reloadData();
        } else {
            JOptionPane.showMessageDialog(Main_Window.parentOfApplication,
                    "Please select a contract(s)", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_renewBtnActionPerformed

    private void addNoteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNoteBtnActionPerformed
        ClientController clientController = ClientController.getInstance(companyId);
        int numberSelected = rateIncreaseTable.getSelectedRows().length;
        if (numberSelected > 0) {
            AddClientNoteDialog addNoteDialog = new AddClientNoteDialog(Main_Window.parentOfApplication, true);
            addNoteDialog.setVisible(true);

            int[] selectedContracts = rateIncreaseTable.getSelectedRows();
            ClientNotes cNote = addNoteDialog.getClientNote();
            for (int c = 0; c < numberSelected; c++) {
                ClientContract contract = this.rateIncreaseModel.getClientContract(selectedContracts[c]);
                cNote.setClientId(contract.getClient(companyId).getClientId());
                cNote.setNoteTypeId(11);
                try {
                    clientController.saveClientNote(cNote);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            JOptionPane.showMessageDialog(Main_Window.parentOfApplication,
                    "Notes Saved!", "Save", JOptionPane.OK_OPTION);
        } else {
            JOptionPane.showMessageDialog(Main_Window.parentOfApplication,
                    "Please select a contract(s)", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addNoteBtnActionPerformed

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeBtnActionPerformed

    private void printLettersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printLettersBtnActionPerformed
        ArrayList<ClientContract> clientContract = rateIncreaseModel.getSelectedContracts();

        if (clientContract.isEmpty()) {
            JOptionPane.showMessageDialog(Main_Window.parentOfApplication,
                    "Please select a contract(s)", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            EditRateIncreaseTemplates editTemplates = new EditRateIncreaseTemplates(Main_Window.parentOfApplication, true, this.companyId, clientContract);
            editTemplates.setVisible(true);
        }
    }//GEN-LAST:event_printLettersBtnActionPerformed

    private void filterComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterComboActionPerformed
        if (filterCombo.getSelectedIndex() == 1) {
            resolvedBtn.setText("Mark Contact");
        } else {
            resolvedBtn.setText("Mark Do Not Contact");
        }
        this.reloadData();
    }//GEN-LAST:event_filterComboActionPerformed

    private void emailLettersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailLettersBtnActionPerformed
        ArrayList<ClientContract> clientContract = rateIncreaseModel.getSelectedContracts();

        if (clientContract.isEmpty()) {
            JOptionPane.showMessageDialog(Main_Window.parentOfApplication,
                    "Please select a contract(s)", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            EditRateIncreaseTemplates editTemplates = new EditRateIncreaseTemplates(Main_Window.parentOfApplication, true, this.companyId, clientContract);
            editTemplates.setVisible(true);
        }
    }//GEN-LAST:event_emailLettersBtnActionPerformed

    private void resolvedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resolvedBtnActionPerformed
        ArrayList<ClientContract> clientContract = rateIncreaseModel.getSelectedContracts();
        int[] clientIds = new int[clientContract.size()];
        StringBuilder clientNames = new StringBuilder();
        for (int c = 0; c < clientContract.size(); c++) {
            clientIds[c] = clientContract.get(c).getClientId();
            if (c > 0) {
                clientNames.append(",");
                if (c % 4 == 0) {
                    clientNames.append("\r\n");
                }
            }
            clientNames.append(clientContract.get(c).getClient().getClientName());
        }
        try {
            if (resolvedBtn.getText().equals("Mark Do Not Contact")) {
                int confirm = JOptionPane.showConfirmDialog(Main_Window.parentOfApplication, "Do you want to mark\r\n" + clientNames.toString() + "\r\n"
                        + "as non contactable?", "Confirm", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    ClientController.getInstance(companyId).updateClientContact(clientIds, false);
                }
            } else {
                ClientController.getInstance(companyId).updateClientContact(clientIds, true);
            }
            reloadData();
        } catch (Exception exe) {
            exe.printStackTrace();
        }
    }//GEN-LAST:event_resolvedBtnActionPerformed

    private void selectUnselectAllChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectUnselectAllChkActionPerformed
        if (!selectUnselectAllChk.isSelected()) {
            ArrayList<ClientContract> clientContract = rateIncreaseModel.getSelectedContracts();
            int unselect = JOptionPane.YES_OPTION;
            if (clientContract.size() > 0) {
                unselect = JOptionPane.showConfirmDialog(Main_Window.parentOfApplication, "You currently have " + clientContract.size() + " clients selected, do you "
                        + "really want to unselect them?", "Confirm Unselect", JOptionPane.YES_NO_OPTION);
            }
            if (unselect == JOptionPane.YES_OPTION) {
                rateIncreaseModel.selectUnselect(false);
            }
        } else {
            rateIncreaseModel.selectUnselect(true);
        }
    }//GEN-LAST:event_selectUnselectAllChkActionPerformed

    private void exportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportBtnActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("Excel", "xls"));
        chooser.showSaveDialog(Main_Window.parentOfApplication);
        File myFile = chooser.getSelectedFile();
        if (!myFile.getAbsolutePath().toString().toUpperCase().contains(".")) {
            try {
                myFile = new File(myFile.getAbsoluteFile() + ".xls");
                myFile.createNewFile();
            } catch (Exception exe) {
            }
        }
        Workbook wb = new HSSFWorkbook();
        Sheet mainSheet = wb.createSheet("Rate Increases");

        Row headerRow = mainSheet.createRow(0);
        Cell clientBranch = headerRow.createCell(0);
        Cell clientNameHeader = headerRow.createCell(1);
        Cell clientContractType = headerRow.createCell(2);
        Cell clientContact = headerRow.createCell(3);
        Cell clientContactAddress = headerRow.createCell(4);
        Cell clientContactCity = headerRow.createCell(5);
        Cell clientContactState = headerRow.createCell(6);
        Cell clientContactZip = headerRow.createCell(7);
        Cell clientIncrease = headerRow.createCell(8);
        Cell clientBillRate = headerRow.createCell(9);
        Cell clientStartDate = headerRow.createCell(10);

        clientBranch.setCellValue("Branch");
        clientNameHeader.setCellValue("Client Name");
        clientContractType.setCellValue("Contract Type");
        clientContact.setCellValue("Contact Name");
        clientContactAddress.setCellValue("Contact Address");
        clientContactCity.setCellValue("Contact City");
        clientContactState.setCellValue("Contact State");
        clientContactZip.setCellValue("Contact Zip");
        clientIncrease.setCellValue("Client Increase");
        clientBillRate.setCellValue("Client Bill Rate");
        clientStartDate.setCellValue("Client Start Date");

        CellStyle cs = wb.createCellStyle();
        DataFormat df = wb.createDataFormat();
        cs.setDataFormat(df.getFormat("$#,##0.00"));

        for (int r = 0; r < rateIncreaseModel.getRowCount(); r++) {
            Row myRow = mainSheet.createRow(r + 1);

            Cell branchCell = myRow.createCell(0);
            Cell nameCell = myRow.createCell(1);
            Cell contractTypeCell = myRow.createCell(2);
            Cell cotactNameCell = myRow.createCell(3);
            Cell contactAddressCell = myRow.createCell(4);
            Cell contactCityCell = myRow.createCell(5);
            Cell contactStateCell = myRow.createCell(6);
            Cell contactZipCell = myRow.createCell(7);
            Cell clientIncreaseCell = myRow.createCell(8);
            Cell clientBillCell = myRow.createCell(9);
            Cell clientStartDateCell = myRow.createCell(10);

            ClientContract clientContract = rateIncreaseModel.getClientContract(rateIncreaseTable.convertRowIndexToModel(r));

            String clientAddress = "";
            String clientCity = "";
            String clientState = "";
            String clientZip = "";
            boolean hasBillingContact = false;

            ArrayList<ClientContact> contacts = clientContract.getClient().getContacts(companyId);
            String contact = "To Whom it May Concern";
            for (int co = 0; co < contacts.size(); co++) {
                if (contacts.get(co).getClientContactType() == 5) {
                    contact = contacts.get(co).getFullName();
                    clientAddress = contacts.get(co).getClientContactAddress();
                    clientCity = contacts.get(co).getClientContactCity();
                    clientState = contacts.get(co).getClientContactState();
                    clientZip = contacts.get(co).getClientContactZip();
                    hasBillingContact = true;
                }
            }
            for (int co = 0; co < contacts.size(); co++) {
                if (contacts.get(co).getClientContactIsPrimary() == 1) {
                    if (!hasBillingContact) {
                        contact = contacts.get(co).getFullName();
                    }
                    if (clientAddress == null || clientAddress.length() < 2) {
                        clientAddress = contacts.get(co).getClientContactAddress();
                        clientCity = contacts.get(co).getClientContactCity();
                        clientState = contacts.get(co).getClientContactState();
                        clientZip = contacts.get(co).getClientContactZip();
                    }
                }
            }
            try {
                if (contact.equals("To Whom it May Concern") && contacts.size() > 0) {
                    contact = contacts.get(0).getFullName();
                }
                if (clientAddress == null || clientAddress.length() < 2) {
                    clientAddress = clientContract.getClient().getAddress1();
                    clientCity = clientContract.getClient().getCity();
                    clientState = clientContract.getClient().getState();
                    clientZip = clientContract.getClient().getZip();
                }
            } catch (Exception exe) {
            }

            branchCell.setCellValue(rateIncreaseModel.getValueAt(rateIncreaseTable.convertRowIndexToModel(r), 1).toString());
            nameCell.setCellValue(rateIncreaseModel.getValueAt(rateIncreaseTable.convertRowIndexToModel(r), 0).toString());
            contractTypeCell.setCellValue(rateIncreaseModel.getValueAt(rateIncreaseTable.convertRowIndexToModel(r), 3).toString());
            cotactNameCell.setCellValue(contact);
            contactAddressCell.setCellValue(clientAddress);
            contactCityCell.setCellValue(clientCity);
            contactStateCell.setCellValue(clientState);
            contactZipCell.setCellValue(clientZip);
            try {
                clientIncreaseCell.setCellValue(rateIncreaseModel.getValueAt(rateIncreaseTable.convertRowIndexToModel(r), 5).toString());
            } catch (Exception exe) {
            }
            try {
                ArrayList<ClientRateCode> rates = BillingController.getInstance(companyId).getClientRateCodes(clientContract.getClientId());
                for (int ra = 0; ra < rates.size(); ra++) {
                    if (rates.get(ra).getRateCode(Integer.parseInt(companyId)).getRateCodeId().equals(6)) {
                        clientBillCell.setCellValue(rates.get(ra).getBillAmount().doubleValue());
                    }
                }
                clientBillCell.setCellStyle(cs);
            } catch (Exception exe) {
            }
            try {
                clientStartDateCell.setCellValue(new SimpleDateFormat("MM/dd/yyyy").format(clientContract.getClient().getClientStartDate()));
            } catch (Exception exe) {}
        }

        try {
            FileOutputStream fileOut = new FileOutputStream(myFile);
            wb.write(fileOut);
            fileOut.close();
        } catch (Exception exe) {
            exe.printStackTrace();
        }
        JOptionPane.showMessageDialog(Main_Window.parentOfApplication, "Export Completed", "Export Completed", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_exportBtnActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNoteBtn;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JButton closeBtn;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JButton emailLettersBtn;
    private javax.swing.JButton exportBtn;
    private javax.swing.JComboBox filterCombo;
    private javax.swing.JButton printLettersBtn;
    private javax.swing.JTable rateIncreaseTable;
    private javax.swing.JButton renewBtn;
    private javax.swing.JButton resolvedBtn;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JCheckBox selectUnselectAllChk;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
