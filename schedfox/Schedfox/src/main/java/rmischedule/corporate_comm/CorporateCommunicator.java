/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CorporateCommunicator.java
 *
 * Created on Oct 18, 2010, 10:27:49 AM
 */
package rmischedule.corporate_comm;

import java.util.ArrayList;
import java.util.Date;
import java.util.Hashtable;
import rmischedule.data_connection.Connection;
import rmischedule.main.Main_Window;
import rmischedule.messaging.email.SchedfoxEmail;
import rmischedule.schedule.ScheduleDashboardPanel;
import rmischedule.schedule.Schedule_View_Panel;
import rmischeduleserver.RMIScheduleServerImpl;
import rmischeduleserver.control.ClientController;
import rmischeduleserver.control.ProblemSolverController;
import schedfoxlib.model.util.Record_Set;
import schedfoxlib.model.Client;
import schedfoxlib.model.Problemsolver;
import schedfoxlib.model.User;
import rmischeduleserver.mysqlconnectivity.queries.client.load_client_by_id_query;
import rmischeduleserver.mysqlconnectivity.queries.user.get_user_by_id_query;

/**
 *
 * @author user
 */
public class CorporateCommunicator extends javax.swing.JPanel {

    private int clientId;
    private Schedule_View_Panel lastSvp;
    private Client client;
    private Hashtable<Integer, User> employeesHash;
    private ScheduleDashboardPanel myParent;

    /**
     * Creates new form CorporateCommunicator
     */
    public CorporateCommunicator(ScheduleDashboardPanel panel) {
        initComponents();

        employeesHash = new Hashtable<Integer, User>();
        this.myParent = panel;

    }

    public Client getClientObj(RMIScheduleServerImpl server, String companyId) {
        if (this.client == null) {
            load_client_by_id_query idQuery = new load_client_by_id_query();
            idQuery.setCompany(companyId);
            idQuery.setPreparedStatement(new Object[]{this.clientId});
            try {
                Record_Set rst = server.executeQuery(idQuery, "");
                this.client = new Client(new Date(), rst);
            } catch (Exception e) {
                System.out.println("Could not load Client. Error: " + e);
            }
        }
        return this.client;
    }

    public void refreshProblems(Schedule_View_Panel svp) {
        ArrayList<Problemsolver> problems = new ArrayList<Problemsolver>();
        Connection myConn = new Connection();
        try {
            
            ProblemSolverController problemController = ProblemSolverController.getInstance(svp.getCompany());
            ClientController clientController = ClientController.getInstance(svp.getCompany());
            ArrayList<Client> clients = clientController.getClientsByDuplicateLogin(Integer.parseInt(Main_Window.parentOfApplication.getUser().getUserId()));
            
            this.clientId = Integer.parseInt(Main_Window.parentOfApplication.myUser.getUserId());
            for (int c = 0; c < clients.size(); c++) {
                problems.addAll(problemController.getProblemsForClient(clients.get(c).getClientId()));
            }
        } catch (Exception e) {
            this.clientId = 0;
        }


        for (int c = problemPanel.getComponentCount() - 1; c >= 0; c--) {
            if (problemPanel.getComponent(c) instanceof SolutionPanel) {
                problemPanel.remove(c);
            } else if (problemPanel.getComponent(c) instanceof ProblemSolverPanel) {
                problemPanel.remove(c);
            }
        }
        User clientUser = new User();
        clientUser.setUserFirstName("Client Entered");
        clientUser.setUserLastName("");
        employeesHash.put(0, clientUser);
        for (int p = 0; p < problems.size(); p++) {
            Problemsolver problem = problems.get(p);
            if (!problem.isEmpty()) {
                if (employeesHash.get(problem.getUserId()) == null) {
                    get_user_by_id_query empQuery = new get_user_by_id_query();
                    empQuery.setPreparedStatement(new Object[]{problem.getUserId()});
                    employeesHash.put(problem.getUserId(),
                            new User(new Date(), myConn.executeQuery(empQuery)));
                }
                problemPanel.add(new ProblemSolverPanel(problems.get(p), employeesHash.get(problem.getUserId()), svp));
            }
        }
        problemPanel.revalidate();
        lastSvp = svp;
        jScrollPane1.repaint();
        jScrollPane1.revalidate();
    }

    public String getPageText() {
        return "Corporate Communicator";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        createCorpBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        problemPanel = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Corporate Communicator"));
        setMaximumSize(new java.awt.Dimension(360, 50000));
        setMinimumSize(new java.awt.Dimension(51, 485));
        setPreferredSize(new java.awt.Dimension(160, 485));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));
        add(jPanel2);

        jPanel1.setMaximumSize(new java.awt.Dimension(32767, 500));
        jPanel1.setMinimumSize(new java.awt.Dimension(23, 460));
        jPanel1.setPreferredSize(new java.awt.Dimension(100, 460));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        jPanel4.setMaximumSize(new java.awt.Dimension(32767, 35));
        jPanel4.setMinimumSize(new java.awt.Dimension(103, 35));
        jPanel4.setPreferredSize(new java.awt.Dimension(100, 35));
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 2));

        createCorpBtn.setText("Create New");
        createCorpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCorpBtnActionPerformed(evt);
            }
        });
        jPanel4.add(createCorpBtn);

        jPanel1.add(jPanel4);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setHorizontalScrollBar(null);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(25, 430));

        problemPanel.setLayout(new javax.swing.BoxLayout(problemPanel, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(problemPanel);

        jPanel1.add(jScrollPane1);

        add(jPanel1);
    }// </editor-fold>//GEN-END:initComponents

    private void createCorpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCorpBtnActionPerformed
        if (lastSvp != null) {
            Connection myConn = new Connection();
            Client myClient = this.getClientObj(myConn.getServer(), lastSvp.getCompany());
            CreateNewCorporateCommunicator newCorp =
                    new CreateNewCorporateCommunicator(Main_Window.parentOfApplication, this, lastSvp, true, myClient);
            newCorp.setVisible(true);
            
            try {
                ClientController clientController = ClientController.getInstance(lastSvp.getCompany());
                User dmUser = clientController.getDMAssignedToClient(myClient.getClientId());
                String[] users = new String[1];
                users[0] = dmUser.getEmailAddress();
                SchedfoxEmail myEmail = new SchedfoxEmail(myClient.getClientName() + " has entered a new CC", 
                        myClient.getClientName() + " has entered a new CC. Please login to Schedfox to view it!", 
                        users, true);
                
            } catch (Exception e) {}
            
            this.refreshProblems(lastSvp);
        }
    }//GEN-LAST:event_createCorpBtnActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createCorpBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel problemPanel;
    // End of variables declaration//GEN-END:variables
}
