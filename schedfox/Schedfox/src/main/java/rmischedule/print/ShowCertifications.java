/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ShowCertifications.java
 *
 * Created on Jan 18, 2011, 10:58:37 AM
 */

package rmischedule.print;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import javax.swing.ButtonGroup;
import javax.swing.JRadioButton;
import rmischedule.data_connection.Connection;
import schedfoxlib.model.util.Record_Set;
import schedfoxlib.model.Certification;
import rmischeduleserver.mysqlconnectivity.queries.schedule_data.get_all_employee_types_query;
import rmischeduleserver.mysqlconnectivity.queries.util.get_certifications_list_query;

/**
 *
 * @author user
 */
public class ShowCertifications extends javax.swing.JDialog {

    private Connection myConn;
    private ArrayList<Certification> certifications;
    private ArrayList<CertificationChoosePanel> choosePanels;
    private HashMap<JRadioButton, Integer> employeeTypes = new HashMap<JRadioButton, Integer>();

    private JRadioButton all;
    private JRadioButton none;

    private Certification selectedCert;
    private ArrayList<Integer> selectedTypes = new ArrayList<Integer>();

    private static final String selectAll = "ANY type";
    private static final String selectNone = "NO type";

    /** Creates new form ShowCertifications */
    public ShowCertifications(java.awt.Frame parent, boolean modal, Connection myConn) {
        super(parent, modal);
        initComponents();
        this.myConn = myConn;
        this.populateList();
    }

    private void populateList() {
        get_certifications_list_query myQuery = new get_certifications_list_query();
        myQuery.setPreparedStatement(new Object[]{});
        ButtonGroup mainGroup = new ButtonGroup();
        Record_Set rst = myConn.executeQuery(myQuery);
        certifications = new ArrayList<Certification>();
        choosePanels = new ArrayList<CertificationChoosePanel>();
        for (int r = 0; r < rst.length(); r++) {
            Certification cert = new Certification(rst);
            certifications.add(cert);
            rst.moveNext();
            CertificationChoosePanel certPanel = new CertificationChoosePanel(cert);
            contentPanel.add(certPanel);
            choosePanels.add(certPanel);
            certPanel.addToGroupLayout(mainGroup);
            if (r == 0) {
                certPanel.setSelected();
            }
        }

        ButtonGroup typeGroup = new ButtonGroup();
        get_all_employee_types_query typeQuery = new get_all_employee_types_query();
        Record_Set rst2 = myConn.executeQuery(typeQuery);
        all = new JRadioButton(selectAll);
        all.setSelected(true);
        employeeTypes.put(all, -2);
        employeeTypePanel.add(all);
        typeGroup.add(all);

        none = new JRadioButton(selectNone);
        none.setSelected(true);
        employeeTypes.put(none, -1);
        employeeTypePanel.add(none);
        typeGroup.add(none);
        
        for (int r = 0; r < rst2.length(); r++) {
            JRadioButton myRadio = new JRadioButton();
            employeeTypes.put(myRadio, rst2.getInt("employee_type_id"));
            myRadio.setText(rst2.getString("employee_type"));
            employeeTypePanel.add(myRadio);
            typeGroup.add(myRadio);
        }
    }

    public Certification getSelectedCert() {
        return this.selectedCert;
    }

    public ArrayList<Integer> getSelectedEmployeeTypes() {
        return this.selectedTypes;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        directionsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        contentMainPanel = new javax.swing.JPanel();
        contentPanel = new javax.swing.JPanel();
        employeeTypePanel = new javax.swing.JPanel();
        controlsPanel = new javax.swing.JPanel();
        cancelBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        okBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        directionsPanel.setMaximumSize(new java.awt.Dimension(32767, 30));
        directionsPanel.setMinimumSize(new java.awt.Dimension(20, 30));
        directionsPanel.setPreferredSize(new java.awt.Dimension(20, 30));
        directionsPanel.setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setText("Select a certification:");
        directionsPanel.add(jLabel1);

        getContentPane().add(directionsPanel);

        contentMainPanel.setMaximumSize(new java.awt.Dimension(500000, 500000));
        contentMainPanel.setLayout(new java.awt.GridLayout(1, 0));

        contentPanel.setLayout(new javax.swing.BoxLayout(contentPanel, javax.swing.BoxLayout.Y_AXIS));
        contentMainPanel.add(contentPanel);

        getContentPane().add(contentMainPanel);

        employeeTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Employee Types - Choose one or leave select all"));
        employeeTypePanel.setMaximumSize(new java.awt.Dimension(500000, 80));
        employeeTypePanel.setMinimumSize(new java.awt.Dimension(0, 80));
        employeeTypePanel.setPreferredSize(new java.awt.Dimension(0, 80));
        employeeTypePanel.setLayout(new java.awt.GridLayout(1, 0));
        getContentPane().add(employeeTypePanel);

        controlsPanel.setMaximumSize(new java.awt.Dimension(32767, 35));
        controlsPanel.setMinimumSize(new java.awt.Dimension(20, 35));
        controlsPanel.setPreferredSize(new java.awt.Dimension(20, 25));
        controlsPanel.setLayout(new javax.swing.BoxLayout(controlsPanel, javax.swing.BoxLayout.LINE_AXIS));

        cancelBtn.setText("Cancel");
        cancelBtn.setMaximumSize(new java.awt.Dimension(70, 28));
        cancelBtn.setMinimumSize(new java.awt.Dimension(70, 28));
        cancelBtn.setPreferredSize(new java.awt.Dimension(70, 28));
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });
        controlsPanel.add(cancelBtn);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 353, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        controlsPanel.add(jPanel1);

        okBtn.setText("OK");
        okBtn.setMaximumSize(new java.awt.Dimension(70, 28));
        okBtn.setMinimumSize(new java.awt.Dimension(70, 28));
        okBtn.setPreferredSize(new java.awt.Dimension(70, 28));
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });
        controlsPanel.add(okBtn);

        getContentPane().add(controlsPanel);

        setSize(new java.awt.Dimension(511, 422));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed
        for (int c = 0; c < choosePanels.size(); c++) {
            if (choosePanels.get(c).isSelected()) {
                this.selectedCert = choosePanels.get(c).getCert();
            }
        }
        Iterator<JRadioButton> buttonsIterator = employeeTypes.keySet().iterator();
        boolean selectAllChosen = false;
        if (all.isSelected()) {
            selectAllChosen = true;
        }
        while (buttonsIterator.hasNext()) {
            JRadioButton currButton = buttonsIterator.next();
            if (employeeTypes.get(currButton) >= 0) {
                if (selectAllChosen || currButton.isSelected()) {
                    selectedTypes.add(employeeTypes.get(currButton));
                }
            }
        }
        this.setVisible(false);
    }//GEN-LAST:event_okBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JPanel contentMainPanel;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JPanel controlsPanel;
    private javax.swing.JPanel directionsPanel;
    private javax.swing.JPanel employeeTypePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton okBtn;
    // End of variables declaration//GEN-END:variables

}
