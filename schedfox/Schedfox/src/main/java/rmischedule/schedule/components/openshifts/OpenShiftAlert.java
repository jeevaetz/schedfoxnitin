/*
 * OpenShiftAlert.java
 *
 * Created on December 21, 2004, 2:08 PM
 */

package rmischedule.schedule.components.openshifts;
import java.awt.*;
import rmischedule.schedule.checkincheckout.*;
import rmischedule.main.*;
import rmischedule.schedule.*;
import rmischedule.schedule.Schedule_View_Panel;
/**
 *
 * @author  ira
 */
public class OpenShiftAlert extends javax.swing.JPanel {
    int sX, sY;
    
    /** Creates new form OpenShiftAlert */
    public OpenShiftAlert() {
        initComponents();
        this.setSize(0,0);
        Main_Window.parentOfApplication.getLayeredPane().add(this);
        this.setBackground(new Color(224,228,245, 180));
    }
    
    public void showMe(boolean showme) {
        sX = Main_Window.parentOfApplication.desktop.getBounds().width / 2;
        sY = Main_Window.parentOfApplication.desktop.getBounds().height / 2;
        DisplayDialogThread ddt = new DisplayDialogThread(showme,this);
        ddt.start();
    }
    
    public void addOpenShift(IndividualCheckInCheckOutPanel newPanel) {
        try {
            if (newPanel.EmployeeNameLabel.getText() == null) {
                if (newPanel.ClientNameLabel.getText().length() > 0) {
                    DataPanel.add(new IndividualOpenShift(newPanel));
                    DataPanel.revalidate();
                }
            } else if (newPanel.EmployeeNameLabel.getText().length() == 0 && newPanel.ClientNameLabel.getText().length() > 0) {
                DataPanel.add(new IndividualOpenShift(newPanel));
                DataPanel.revalidate();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void clearAllShifts() {
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        MainPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        myScrollPanel = new javax.swing.JScrollPane();
        DataPanel = new javax.swing.JPanel();

        setLayout(new java.awt.GridLayout(1, 0));

        setBackground(new java.awt.Color(224, 228, 245));
        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(1, 0, 0), 3, true));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        MainPanel.setLayout(new java.awt.BorderLayout());

        MainPanel.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 10, 1, 10)));
        MainPanel.setOpaque(false);
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.X_AXIS));

        jPanel1.setOpaque(false);
        jLabel1.setFont(new java.awt.Font("MS Sans Serif", 0, 18));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(jLabel1);

        jLabel2.setFont(new java.awt.Font("MS Sans Serif", 3, 24));
        jLabel2.setForeground(new java.awt.Color(140, 35, 35));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Shift Alert!");
        jLabel2.setMaximumSize(new java.awt.Dimension(900, 40));
        jPanel1.add(jLabel2);

        MainPanel.add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setOpaque(false);
        jButton1.setText("OK");
        jButton1.setMaximumSize(new java.awt.Dimension(80, 23));
        jButton1.setMinimumSize(new java.awt.Dimension(80, 23));
        jButton1.setPreferredSize(new java.awt.Dimension(80, 23));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel2.add(jButton1);

        MainPanel.add(jPanel2, java.awt.BorderLayout.SOUTH);

        DataPanel.setLayout(new javax.swing.BoxLayout(DataPanel, javax.swing.BoxLayout.Y_AXIS));

        DataPanel.setOpaque(false);
        myScrollPanel.setViewportView(DataPanel);

        MainPanel.add(myScrollPanel, java.awt.BorderLayout.CENTER);

        add(MainPanel);

    }
    // </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DisplayDialogThread ddt = new DisplayDialogThread(false, this);
        ddt.start();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    public String toString() {
        return ("In Schedule_Employe_Availability_Split_Panel Object " + super.toString());
    }
    
    public class DisplayDialogThread extends ScheduleThread {
        private boolean isDisplayingNotRemoving;
        private OpenShiftAlert threadparent;
        private boolean killMe;
        
        public DisplayDialogThread(boolean isDisplaying, OpenShiftAlert osa) {
            isDisplayingNotRemoving = isDisplaying;
            threadparent = osa;
            //registerMe(parent);
            killMe = false;
        }
        
        public void run() {
            this.setPriority(Thread.MAX_PRIORITY);
            remove(MainPanel);
            int addNum = 0;
            int start = 0;
            int end = 0;
            int currNum;
            if (isDisplayingNotRemoving) {
                addNum = 2;
                start = 0;
                end = 30;
                currNum = start;
            } else {
                addNum = 2;
                start = -30;
                end = 0;
                currNum = start;
            }
            
            while(currNum != end && !killMe) {
                setSize(getWidth() + (currNum * 2), getHeight() + currNum);
                setLocation((sX - getWidth()) + getWidth() / 2, sY - (getHeight() /2));
                currNum+=addNum;
                repaint();
                try {
                    sleep(2);
                } catch (Exception e) {
                }
            }
            if (!isDisplayingNotRemoving) {
                setSize(0,0);
            }
            add(MainPanel);
            repaint();
            validate();
        }
        
        public void killMe() {
            killMe = true;
            this.interrupt();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel DataPanel;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane myScrollPanel;
    // End of variables declaration//GEN-END:variables
    
}
