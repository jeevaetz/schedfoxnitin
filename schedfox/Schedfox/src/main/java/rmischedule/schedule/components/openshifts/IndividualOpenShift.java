/*
 * IndividualOpenShift.java
 *
 * Created on February 22, 2005, 8:15 AM
 */

package rmischedule.schedule.components.openshifts;
import rmischeduleserver.util.StaticDateTimeFunctions;
import rmischedule.schedule.Schedule_View_Panel;
import rmischedule.components.*;
import rmischedule.schedule.checkincheckout.*;
import rmischedule.main.*;
import javax.swing.*;
import java.util.*;
import java.awt.*;
import schedfoxlib.model.AssembleCheckinScheduleType;
/**
 *
 * @author  ira
 */
public class IndividualOpenShift extends javax.swing.JPanel {

    private IndividualCheckInCheckOutPanel activeShift;
    private Schedule_View_Panel Parent;
    private Vector<JLabel> myVectorOfLabels;
    private String branch;
    private String company;
    private String id;
    private zoomToOpenShift myThread;

    /** Creates new form IndividualOpenShift */
    public IndividualOpenShift(IndividualCheckInCheckOutPanel myShift) {
        initComponents();
        AssembleCheckinScheduleType shiftType = myShift.getCheckinType();
        myVectorOfLabels = new Vector();
        addChildrenToVector(this);
        activeShift = myShift;
        OpenShiftLabel.setText(activeShift.ClientNameLabel.getText());
        Start.setText(" " + StaticDateTimeFunctions.stringToFormattedTime(shiftType.getStart_time() + "", StaticDateTimeFunctions.MILITARY_FORMAT) + " ");
        End.setText(" " + StaticDateTimeFunctions.stringToFormattedTime(shiftType.getEnd_time() + "", StaticDateTimeFunctions.MILITARY_FORMAT) + " ");
        Company.setText(" " + Main_Window.parentOfApplication.getCompanyNameById(shiftType.getCompanyId()) + " ");
        Branch.setText(" " + Main_Window.parentOfApplication.getBranchNameById(shiftType.getBranch_id() + "") + " ");
        branch = shiftType.getBranch_id() + "";
        company = shiftType.getCompanyId();
        id = shiftType.getSid();
        OpenShiftLabel.setToolTipText("Click To Zoom To Shift");
        for (int i = 0; i < myVectorOfLabels.size(); i++) {
            myVectorOfLabels.get(i).addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    ZoomToShift(evt);
                }
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    HighlightText(evt);
                }
                public void mouseExited(java.awt.event.MouseEvent evt) {
                    UnHighlightText(evt);
                }
            });
        }
        myThread = new zoomToOpenShift(company, branch, id);
    }

    private void addChildrenToVector(JPanel parent) {
        Component currComp;
        for (int i = 0; i < parent.getComponentCount(); i++) {
            currComp = parent.getComponent(i);
            try {
                myVectorOfLabels.add((JLabel)currComp);
            } catch (Exception e) {
                try {
                    addChildrenToVector((JPanel)currComp);
                } catch (Exception x) {}
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        Start = new javax.swing.JLabel();
        End = new javax.swing.JLabel();
        OpenShiftLabel = new javax.swing.JLabel();
        Company = new javax.swing.JLabel();
        Branch = new javax.swing.JLabel();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));

        setBackground(new java.awt.Color(189, 181, 215));
        setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setMaximumSize(new java.awt.Dimension(32767, 22));
        setMinimumSize(new java.awt.Dimension(8, 22));
        setPreferredSize(new java.awt.Dimension(118, 22));
        Start.setText("jLabel1");
        Start.setMaximumSize(new java.awt.Dimension(50, 14));
        Start.setMinimumSize(new java.awt.Dimension(50, 14));
        Start.setPreferredSize(new java.awt.Dimension(50, 14));
        add(Start);

        End.setText("jLabel2");
        End.setMaximumSize(new java.awt.Dimension(50, 14));
        End.setMinimumSize(new java.awt.Dimension(50, 14));
        End.setPreferredSize(new java.awt.Dimension(50, 14));
        add(End);

        OpenShiftLabel.setFont(new java.awt.Font("Bitstream Vera Sans Mono", 0, 12));
        OpenShiftLabel.setText("AmerSuites Hotel");
        OpenShiftLabel.setMaximumSize(new java.awt.Dimension(120, 20));
        OpenShiftLabel.setMinimumSize(new java.awt.Dimension(120, 20));
        OpenShiftLabel.setPreferredSize(new java.awt.Dimension(120, 20));
        OpenShiftLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ZoomToShift(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                HighlightText(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                UnHighlightText(evt);
            }
        });

        add(OpenShiftLabel);

        Company.setText("jLabel1");
        Company.setMaximumSize(new java.awt.Dimension(60, 14));
        Company.setMinimumSize(new java.awt.Dimension(60, 14));
        Company.setPreferredSize(new java.awt.Dimension(60, 14));
        add(Company);

        Branch.setText("jLabel2");
        Branch.setMaximumSize(new java.awt.Dimension(60, 14));
        Branch.setMinimumSize(new java.awt.Dimension(60, 14));
        Branch.setPreferredSize(new java.awt.Dimension(60, 14));
        add(Branch);

    }
    // </editor-fold>//GEN-END:initComponents

    private void ZoomToShift(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ZoomToShift
        if (!myThread.isAlive()) {
            myThread = new zoomToOpenShift(company, branch, id);
            myThread.start();
        }
    }//GEN-LAST:event_ZoomToShift

    private void UnHighlightText(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UnHighlightText
         for (int i = 0; i < myVectorOfLabels.size(); i++) {
            myVectorOfLabels.get(i).setForeground(new Color(0,0,0));
         }
    }//GEN-LAST:event_UnHighlightText

    private void HighlightText(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HighlightText
        for (int i = 0; i < myVectorOfLabels.size(); i++) {
            myVectorOfLabels.get(i).setForeground(new Color(255,51,51));
         }
    }//GEN-LAST:event_HighlightText

    private class zoomToOpenShift extends Thread {
        private String CO;
        private String BR;
        private String ID;
        public zoomToOpenShift(String co, String br, String id) {
            CO = co;
            BR = br;
            ID = id;
        }

        public void run() {
            Main_Window.myScheduleForm.checkForAndLoadSchedule(BR, CO);
            System.out.println("**BR:"+BR);
            System.out.println("**CO:"+CO);
            while (Main_Window.myScheduleForm.getSchedulePanel(BR, CO) == null) {
                try {
                    sleep(20);
                } catch (Exception e) {}
            }
            while (!(Main_Window.myScheduleForm.getSchedulePanel(BR, CO).isDoneLoadingCompletely)) {
                try {
                    sleep(20);
                } catch (Exception e) {}
            }
            Main_Window.myScheduleForm.getSchedulePanel(BR, CO).zoomToShift(ID);
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Branch;
    private javax.swing.JLabel Company;
    private javax.swing.JLabel End;
    private javax.swing.JLabel OpenShiftLabel;
    private javax.swing.JLabel Start;
    // End of variables declaration//GEN-END:variables

}
