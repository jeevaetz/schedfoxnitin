/*
 * EmployeeTimeExport.java
 *
 * Created on August 21, 2007, 7:36 AM
 */

package rmischedule.data_export.employee;

import rmischeduleserver.util.StaticDateTimeFunctions;
import java.io.*;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import rmischedule.main.*;
import rmischedule.components.*;
import rmischedule.components.jcalendar.*;
import rmischedule.data_connection.*;
import org.apache.poi.hssf.usermodel.*;
import schedfoxlib.model.util.Record_Set;
import rmischeduleserver.mysqlconnectivity.queries.schedule_data.generic_assemble_schedule_query;
import rmischeduleserver.mysqlconnectivity.queries.RunQueriesEx;
import rmischeduleserver.mysqlconnectivity.queries.employee.employee_list_query;
import rmischeduleserver.mysqlconnectivity.queries.client.client_query;
import rmischeduleserver.mysqlconnectivity.queries.schedule_data.check_in.check_in_query;

/**
 *
 * @author  jason.allen
 */
public class EmployeeTimeExport extends javax.swing.JInternalFrame {
    
    private Main_Window Parent;
    private JCalendarComboBox myStartCombo;
    private JCalendarComboBox myEndCombo;
    private Connection myConn;
    private String myCompany;
    private String myBranch;
    
    private generic_assemble_schedule_query scheduleQuery;
    private check_in_query checkinQuery;
    private employee_list_query employeeInfoQuery;
    private client_query clientInfoQuery;
    
    public int max00;
    public int min15;
    public int max15;
    public int min30;
    public int max30;
    public int min45;
    public int max45;
    public int min60;
        
    /** Creates new form EmployeeTimeExport */
    public EmployeeTimeExport(String companyId, String branchId) {
        initComponents();
        Parent = Main_Window.parentOfApplication;
        
        myConn = new Connection();
        
        scheduleQuery       = new generic_assemble_schedule_query();
        employeeInfoQuery   = new employee_list_query();
        clientInfoQuery     = new client_query();
        checkinQuery        = new check_in_query();
        
        myCompany = companyId;
        myBranch = branchId;
        
        myStartCombo = new JCalendarComboBox();
        myEndCombo = new JCalendarComboBox();
        
        this.jpEndingDate.add(myEndCombo);
        this.jpStartingdate.add(myStartCombo);

        Parent.desktop.add(this);
        this.setVisible(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ef30Min = new javax.swing.JTextField();
        ef00Max = new javax.swing.JTextField();
        ef15Max = new javax.swing.JTextField();
        ef15Min = new javax.swing.JTextField();
        ef30Max = new javax.swing.JTextField();
        ef45Max = new javax.swing.JTextField();
        ef45Min = new javax.swing.JTextField();
        ef60Min = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jpStartingdate = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jpEndingDate = new javax.swing.JPanel();
        pbCancel = new javax.swing.JButton();
        pbExport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Minute Rounding"));
        jLabel1.setText("00");

        jLabel2.setText("15");

        jLabel3.setText("30");

        jLabel4.setText("45");

        jLabel5.setText("60");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("min");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("max");

        ef30Min.setText("23");

        ef00Max.setText("7");

        ef15Max.setText("22");

        ef15Min.setText("8");

        ef30Max.setText("37");

        ef45Max.setText("52");

        ef45Min.setText("38");

        ef60Min.setText("53");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(24, 24, 24)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2)
                            .add(jLabel3)
                            .add(jLabel4)
                            .add(jLabel5))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(ef60Min, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(jLabel6)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, ef30Min, 0, 0, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, ef15Min, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(ef45Min, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(jLabel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, ef00Max, 0, 0, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, ef45Max, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, ef30Max, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, ef15Max, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(jLabel7))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ef00Max, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .add(6, 6, 6)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(ef15Min, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel2))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel3)
                            .add(ef30Min, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(ef15Max, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ef30Max, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ef45Max, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel4)
                        .add(ef45Min, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(8, 8, 8)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(ef60Min, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Date Range"));
        jpStartingdate.setLayout(new javax.swing.BoxLayout(jpStartingdate, javax.swing.BoxLayout.X_AXIS));

        jpStartingdate.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jLabel8.setText("Starting Date");

        jLabel9.setText("Ending Date");

        jpEndingDate.setLayout(new javax.swing.BoxLayout(jpEndingDate, javax.swing.BoxLayout.X_AXIS));

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jpEndingDate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jpStartingdate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel8)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel9))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jLabel8)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jpStartingdate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(29, 29, 29)
                .add(jLabel9)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jpEndingDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        pbCancel.setText("Cancel");
        pbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pbCancelActionPerformed(evt);
            }
        });

        pbExport.setText("Export");
        pbExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pbExportActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(pbCancel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 267, Short.MAX_VALUE)
                        .add(pbExport)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(pbCancel)
                    .add(pbExport))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pbExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pbExportActionPerformed
        this.max00 = 0;
        this.min15 = 0;
        this.max15 = 0;
        this.min30 = 0;
        this.max30 = 0;
        this.min45 = 0;
        this.max45 = 0;
        this.min60 = 0;
        
        try{
            this.max00 = Integer.parseInt(this.ef00Max.getText());
            this.min15 = Integer.parseInt(this.ef15Min.getText());
            this.max15 = Integer.parseInt(this.ef15Max.getText());
            this.min30 = Integer.parseInt(this.ef30Min.getText());
            this.max30 = Integer.parseInt(this.ef30Max.getText());
            this.min45 = Integer.parseInt(this.ef45Min.getText());
            this.max45 = Integer.parseInt(this.ef45Max.getText());
            this.min60 = Integer.parseInt(this.ef60Min.getText());
        }catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Rounding entries must be numeric.", "Error Exporting!", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if((max00 >= min15) || (min15 >= max15) || (max15 >= min30) || (min30 >= max30) ||
           (max30 >= min45) || (min45 >= max45) || (max45 >= min60) || (min60 > 60)) 
        {
            JOptionPane.showMessageDialog(this, "There is an issue with the rounding ranges.", "Error Exporting!", JOptionPane.ERROR_MESSAGE);            
            return;
        }
         
        Calendar begin = this.myStartCombo.getCalendar();
        Calendar end = this.myEndCombo.getCalendar();
        
        if(begin.getTimeInMillis() >= end.getTimeInMillis()) {
            JOptionPane.showMessageDialog(this, "Begining date must be before the ending date.", "Error Exporting!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        JFileChooser saveDialog = new JFileChooser();
        int option = saveDialog.showSaveDialog(this);
        String filename = saveDialog.getSelectedFile().toString();
        if(option == JFileChooser.CANCEL_OPTION || option == JFileChooser.ERROR_OPTION || filename.length() == 0) {
            return;
        } else {
            exportData( saveDialog.getSelectedFile() );            
        }
    }//GEN-LAST:event_pbExportActionPerformed

    private void pbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pbCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_pbCancelActionPerformed
    
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new EmployeeTimeExport().setVisible(true);
//            }
//        });
//    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ef00Max;
    private javax.swing.JTextField ef15Max;
    private javax.swing.JTextField ef15Min;
    private javax.swing.JTextField ef30Max;
    private javax.swing.JTextField ef30Min;
    private javax.swing.JTextField ef45Max;
    private javax.swing.JTextField ef45Min;
    private javax.swing.JTextField ef60Min;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jpEndingDate;
    private javax.swing.JPanel jpStartingdate;
    private javax.swing.JButton pbCancel;
    private javax.swing.JButton pbExport;
    // End of variables declaration//GEN-END:variables
 
    private void exportData( File editFile ) {
        String fileName = editFile.toString();
        
        if(!fileName.endsWith(".xls")) {
            fileName = fileName + ".xls";
        }
        
        FileOutputStream out;
        HSSFWorkbook workBook;
        HSSFSheet sheet;
        HSSFRow row;
        HSSFCell cell;
        
        HashMap Clients = new HashMap();
        HashMap Employees = new HashMap();
        Vector Schedules = new Vector();
        HashMap CheckTimes = new HashMap();
        
        try {
            out         = new FileOutputStream(fileName);
            workBook    = new HSSFWorkbook();
            sheet       = workBook.createSheet();
            row         = null;
            cell        = null;            
        }catch(Exception e) {
            JOptionPane.showMessageDialog(this, "There was an issue creating the spreadsheet.", "Error Exporting!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        HSSFDataFormat cellDateFormat = workBook.createDataFormat();
        HSSFCellStyle cellDateStyle = workBook.createCellStyle();
        cellDateStyle.setDataFormat(cellDateFormat.getFormat("mm/dd/yyyy -  hh:mm"));

        sheet.setColumnWidth((short) 0,(short) 3700);
        sheet.setColumnWidth((short) 1,(short) 5700);
        sheet.setColumnWidth((short) 2,(short) 5700);
        sheet.setColumnWidth((short) 3,(short) 8000);
        sheet.setColumnWidth((short) 4,(short) 8000);
        sheet.setColumnWidth((short) 5,(short) 5700);
        sheet.setColumnWidth((short) 6,(short) 5700);
        sheet.setColumnWidth((short) 7,(short) 5700);
        sheet.setColumnWidth((short) 8,(short) 5700);
        
        row = sheet.createRow(0);
        
        cell = row.createCell((short)0);
        cell.setCellValue("Employee Id");

        cell = row.createCell((short)1);
        cell.setCellValue("Employee First Name");
        
        cell = row.createCell((short)2);
        cell.setCellValue("Employee Last Name");

        cell = row.createCell((short)3);
        cell.setCellValue("Location Name");
        
        cell = row.createCell((short)4);
        cell.setCellValue("Location Worksite");

        cell = row.createCell((short)5);
        cell.setCellValue("Start");

        cell = row.createCell((short)6);
        cell.setCellValue("End");

        cell = row.createCell((short)7);
        cell.setCellValue("Checked In");

        cell = row.createCell((short)8);
        cell.setCellValue("Checked Out");

        myConn.setCompany(myCompany);
        myConn.setBranch(myBranch);
        
        String bw = StaticDateTimeFunctions.convertCalendarToDatabaseFormat(this.myStartCombo.getCalendar());
        String ew = StaticDateTimeFunctions.convertCalendarToDatabaseFormat(this.myEndCombo.getCalendar());
            
        /* get data */
        RunQueriesEx myQueryEx = new RunQueriesEx();
        
        clientInfoQuery.update("", "both", "1000-01-01");
        employeeInfoQuery.update("", "1", null, true);
        scheduleQuery.update("", "", bw, ew, "", "", true);
        checkinQuery.update(bw, ew, "");
        
        myConn.prepQuery(clientInfoQuery);
        myConn.prepQuery(employeeInfoQuery);
        myConn.prepQuery(scheduleQuery);
        myConn.prepQuery(checkinQuery);
        
        myQueryEx.update(clientInfoQuery, employeeInfoQuery, scheduleQuery, checkinQuery);
        
        Record_Set rsClient = null;
        Record_Set rsEmployee = null;
        Record_Set rsSchedule = null;
        Record_Set rsCheckin = null;
        
        ArrayList<Record_Set> myRecords = new ArrayList<Record_Set>();
                
        try{            
             myRecords = myConn.executeQueryEx(myQueryEx);
        }catch(Exception e) {
            e.printStackTrace();
        }

        for (int i = 0; i < myRecords.size(); i++) {
            myRecords.get(i).decompressData();
        }        
        
        rsClient = myRecords.get(0);
        rsEmployee = myRecords.get(1);
        rsSchedule = myRecords.get(6);
        rsCheckin = myRecords.get(7);
        
        if(rsClient != null) {
            for(int i = 0; i < rsClient.length();i++) {
                Clients.put(rsClient.getInt("id"), new ClientData(rsClient.getInt("id"),rsClient.getString("name"), rsClient.getInt("ws")));
                rsClient.moveNext();
            }
        }
        
        if(rsEmployee != null) {
           for(int i = 0; i < rsEmployee.length();i++) {
                Employees.put(rsEmployee.getInt("id"), new EmployeeData(rsEmployee.getInt("id"), rsEmployee.getString("firstname"), rsEmployee.getString("lastname")));
                rsEmployee.moveNext();
           }
        }
        
        if(rsCheckin != null){
            for(int i = 0; i < rsCheckin.length(); i++){
                CheckTimes.put(rsCheckin.getString("shift_id"),
                    new CheckInData(
                        rsCheckin.getString("shift_id"),
                        rsCheckin.getString("time_stamp"),
                        rsCheckin.getString("time_stamp_out")                        
                   )
                );
                rsCheckin.moveNext();
            }
            
        }
        
        if(rsSchedule != null) {
            for(int i = 0; i < rsSchedule.length(); i++) {
                int cid = rsSchedule.getInt("cid");
                int eid = rsSchedule.getInt("eid");
                ClientData cd = (ClientData)Clients.get(cid);
                EmployeeData ed = (EmployeeData)Employees.get(eid);
                
                if(ed != null) {
                    Schedules.add(
                            new ScheduleData(
                                rsSchedule.getString("sid"), 
                                rsSchedule.getString("smid"), 
                                cd, ed, 
                                rsSchedule.getString("date"), 
                                rsSchedule.getInt("start_time"), 
                                rsSchedule.getInt("end_time") 
                           )
                    );
                }
                rsSchedule.moveNext();
            }
        }

        ScheduleDataComparer sdc = new ScheduleDataComparer();
        Collections.sort(Schedules, sdc);
        
        for(int i = 0; i < Schedules.size(); i++) {
            ScheduleData sd = (ScheduleData)Schedules.get(i);
            HSSFRow r = sheet.createRow(i+1);
            
            HSSFCell c;
            
            c = r.createCell((short) 0);
            c.setCellValue(sd.employee.id);

            c = r.createCell((short) 1);
            c.setCellValue(sd.employee.lastName);
            
            c = r.createCell((short) 2);
            c.setCellValue(sd.employee.firstName);
            
            c = r.createCell((short) 3);
            c.setCellValue(sd.client.name);
            
            if(sd.client.worksite > 0) {
                c = r.createCell((short) 4);
                c.setCellValue(sd.client.name);

                c = r.createCell((short) 3);
                ClientData cd = (ClientData)Clients.get(sd.client.worksite);
                if(cd == null) {
                    c.setCellValue("Unkown?");
                }else{
                    c.setCellValue(cd.name);
                }
            }else {
                c = r.createCell((short) 3);
                c.setCellValue(sd.client.name);                    
            }
            
            CheckInData cid = (CheckInData)CheckTimes.get(sd.scheduleId);
            if(cid == null) {
                cid = (CheckInData)CheckTimes.get(sd.long_smid);
            }
            
            c = r.createCell((short) 5);
            c.setCellValue(sd.getStartDate());
            c.setCellStyle(cellDateStyle);                    

            c = r.createCell((short) 6);
            c.setCellValue(sd.getEndDate());
            c.setCellStyle(cellDateStyle);                    

            if(cid == null) {
                c = r.createCell((short) 7);
                c = r.createCell((short) 8);
                
            } else {
                c = r.createCell((short) 7);
                if(cid.checkInDate == null) {

                }else{
                    c.setCellValue(cid.checkInDate);
                    c.setCellStyle(cellDateStyle);                    
                }
                
                c = r.createCell((short) 8);
                if(cid.checkOutDate == null){
                    //c.setCellValue("No Data");
                }else{
                    c.setCellValue(cid.checkOutDate);
                    c.setCellStyle(cellDateStyle);                                    
                }
            }
        }
        
        try{
            workBook.write(out);
        }catch(Exception e) {
            JOptionPane.showMessageDialog(this, "There was an issue creating the spreadsheet.", "Error Exporting!", JOptionPane.ERROR_MESSAGE);
            return;
        }finally {
            try{
                out.close();
            }catch(Exception e) {}
        }

        JOptionPane.showMessageDialog(this, "Export Complete for " + fileName + ".", "Export Complete!", JOptionPane.INFORMATION_MESSAGE);
        return;
    }
    
    private class ClientData {
        public int id;
        public String name;
        public int worksite;
        
        public ClientData(int id, String name, int worksite) {
            this.id = id;
            this.name = name;
            this.worksite = worksite;
        }
    }
    
    private class EmployeeData {
        public int id;
        public String firstName;
        public String lastName;
        
        public EmployeeData(int id, String first, String last) {
            this.id = id;
            this.firstName = first;
            this.lastName = last;
        } 
        
    }
    
    private  class ScheduleDataComparer implements Comparator {
            public int compare(Object obj1, Object obj2)
            {
                    ScheduleData sd1 = (ScheduleData)obj1;
                    ScheduleData sd2 = (ScheduleData)obj2;
                    
                    return sd1.toString().compareTo(sd2.toString());
            }
    }

    private class ScheduleData {
        public String scheduleId;
        public String scheduleMasterId;        
        public String long_smid;
        public ClientData client;
        public EmployeeData employee;
        public String sDate;
        public Calendar date;
        public int startTime;
        public int endTime;
        
        public ScheduleData(String scheduleId, String scheduleMasterid, ClientData client, EmployeeData employee, String date, int startTime, int endTime) {
            this.scheduleId = scheduleId;
            this.scheduleMasterId = scheduleMasterid;
            this.client = client;
            this.employee = employee;
            this.sDate = date;
            this.date = StaticDateTimeFunctions.setCalendarToString(date);
            this.startTime = startTime;
            this.endTime = endTime;
            this.long_smid = "-" + scheduleMasterid + "/" + date;
        }

        public String toString() {
            String str = "";
            String blank = "                                               ";
            str += employee.lastName + blank.substring(employee.lastName.getBytes().length);
            str += employee.firstName + blank.substring(employee.lastName.getBytes().length);
            str += sDate + blank.substring(employee.lastName.getBytes().length);
            return str;
        }
        
        public Calendar getStartDate() {
            Calendar start = date.getInstance();
            start.setTimeInMillis(date.getTimeInMillis());
            start.getTime();
            
            int hour = new Double(Math.ceil(startTime / 60)).intValue();
            int min = (startTime - (hour * 60));

            start.set(start.HOUR, hour);
            start.getTime();
            
            start.set(start.MINUTE, min);
            start.getTime();
            
            return start;
        }
        
        public Calendar getEndDate() {
            Calendar end = date.getInstance();
            end.setTimeInMillis(date.getTimeInMillis());
            end.getTime();
            
            if(startTime > endTime) {
                end.add(end.DAY_OF_YEAR, 1);
            }
            
//            TimeZone tz = TimeZone.getTimeZone("UTC");
//            end.setTimeZone(tz);
            
            int hour = new Double(Math.ceil(endTime / 60)).intValue();
            int min = (endTime - (hour * 60));

            end.set(end.HOUR, hour);
            end.getTime();
            
            end.set(end.MINUTE, min);
            end.getTime();
            
            return end;
        }        

    }
    
    private class CheckInData{
        public String scheduleId;
        public Calendar checkInDate;
        public Calendar checkOutDate;
        
        public CheckInData(String scheduleId, String checkIn, String checkOut) {
            Long ci = Long.parseLong(checkIn);
            if(checkIn.equals("0")) {
                checkInDate = null;
            }else{
                checkInDate = Calendar.getInstance();
                checkInDate.setTimeInMillis(Long.parseLong(checkIn));
                int min = roundMinutes(checkInDate.get(checkInDate.MINUTE));
                if(min == 60){
                    checkInDate.set(checkInDate.MINUTE, 0);               
                    checkInDate.getTime();

                    checkInDate.add(checkInDate.HOUR, 1);                                        
                    checkInDate.getTime();
                }else{
                    checkInDate.set(checkInDate.MINUTE, min);
                    checkInDate.getTime();
                }
            }
            
            if(checkOut.equals("0")) {
                checkOutDate = null;
            }else{
                checkOutDate = Calendar.getInstance();
                checkOutDate.setTimeInMillis(Long.parseLong(checkOut));
                int min = roundMinutes(checkInDate.get(checkOutDate.MINUTE));
                if(min == 60){
                    checkOutDate.set(checkOutDate.MINUTE, 0);               
                    checkOutDate.getTime();

                    checkOutDate.add(checkOutDate.HOUR, 1);                                        
                    checkOutDate.getTime();
                }else{
                    checkOutDate.set(checkOutDate.MINUTE, min);
                    checkOutDate.getTime();
                }
            }
        }

        public int roundMinutes(int min) {
            if(min < max00) {
                return 0;
            }
            
            if(min > min15 && min < max15) {
                return 15;
            }
            
            if(min > min30 && min < max30) {
                return 30;
            }
            
            if(min > min45 && min < max45) {
                return 45;
            }
            
            return 60;            
        }
    }
}
