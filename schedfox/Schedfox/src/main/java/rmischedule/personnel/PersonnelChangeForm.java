/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rmischedule.personnel;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import javax.swing.ComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListDataListener;
import rmischedule.components.jcalendar.JCalendarComboBox;
import rmischedule.main.Main_Window;
import rmischedule.security.security_detail;
import rmischedule.templates.controllers.TemplateController;
import rmischedule.templates.models.InitializeTemplateSystem;
import rmischedule.templates.models.TemplateComboBoxModel;
import rmischedule.templates.view.TemplateDiagForm;
import rmischeduleserver.control.ClientController;
import rmischeduleserver.control.EmployeeController;
import rmischeduleserver.control.PersonnelChangeReasonController;
import schedfoxlib.model.Client;
import schedfoxlib.model.Employee;
import schedfoxlib.model.PersonnelChange;
import schedfoxlib.model.PersonnelChangeReason;
import schedfoxlib.model.TemplateData;

/**
 *
 * @author ira
 */
public class PersonnelChangeForm extends javax.swing.JDialog {

    private ClientComboModel clientModel = new ClientComboModel();
    private EmployeeComboModel employeeModel = new EmployeeComboModel();
    private PersonnelReasonComboModel reasonModel = new PersonnelReasonComboModel();
    private TemplateComboBoxModel templateComboBoxModel = new TemplateComboBoxModel();
    private String companyId;
    private String branchId;
    private JCalendarComboBox dateCal;

    /**
     * Creates new form PersonnelChangeForm
     */
    public PersonnelChangeForm(java.awt.Frame parent, Client client, Employee employee, int companyId, int branchId, boolean modal) {
        super(parent, modal);
        initComponents();

        this.companyId = companyId + "";
        this.branchId = branchId + "";
        this.dateCal = new JCalendarComboBox();
        datePanel.add(dateCal);

        viewController();

        EmployeeController employeeFactory = EmployeeController.getInstance(companyId + "");
        ClientController clientFactory = ClientController.getInstance(companyId + "");
        PersonnelChangeReasonController personnelFactory = PersonnelChangeReasonController.getInstance(companyId + "");

        ArrayList<Employee> employees = new ArrayList<Employee>();
        ArrayList<Client> clients = new ArrayList<Client>();
        try {
            employees = employeeFactory.getActiveAndRecentlyTerminatedEmployeesByBranch(branchId);
        } catch (Exception exe) {
        }
        try {
            clients = clientFactory.getClientsByBranch(branchId);
        } catch (Exception exe) {
        }

        employeeModel.setEmployees(employees);
        clientModel.setClients(clients);

        employeeModel.setSelectedItem(employee);
        clientModel.setSelectedItem(client);

        //clientNameLbl.setText(client.getClientName());
        //employeeNameLbl.setText(employee.getFullName());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        clientCombo = new javax.swing.JComboBox();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        employeeCombo = new javax.swing.JComboBox();
        datePanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        templateCombo = new javax.swing.JComboBox();
        jPanel8 = new javax.swing.JPanel();
        templateBtn = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        reasonTxt = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        reasonText = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        closeBtn = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        skipBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        jPanel5.setMaximumSize(new java.awt.Dimension(32767, 35));
        jPanel5.setMinimumSize(new java.awt.Dimension(0, 35));
        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.LINE_AXIS));

        jLabel3.setText("Client Name");
        jLabel3.setMaximumSize(new java.awt.Dimension(175, 16));
        jLabel3.setMinimumSize(new java.awt.Dimension(175, 16));
        jLabel3.setPreferredSize(new java.awt.Dimension(175, 16));
        jPanel5.add(jLabel3);

        clientCombo.setModel(clientModel);
        clientCombo.setMaximumSize(new java.awt.Dimension(20000, 26));
        jPanel5.add(clientCombo);

        getContentPane().add(jPanel5);

        jPanel6.setMaximumSize(new java.awt.Dimension(32767, 35));
        jPanel6.setMinimumSize(new java.awt.Dimension(0, 35));
        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.LINE_AXIS));

        jLabel5.setText("Employee Name");
        jLabel5.setMaximumSize(new java.awt.Dimension(175, 16));
        jLabel5.setMinimumSize(new java.awt.Dimension(175, 16));
        jLabel5.setPreferredSize(new java.awt.Dimension(175, 16));
        jPanel6.add(jLabel5);

        employeeCombo.setModel(employeeModel);
        employeeCombo.setMaximumSize(new java.awt.Dimension(20000, 26));
        jPanel6.add(employeeCombo);

        getContentPane().add(jPanel6);

        datePanel.setMaximumSize(new java.awt.Dimension(32767, 35));
        datePanel.setMinimumSize(new java.awt.Dimension(0, 35));
        datePanel.setLayout(new javax.swing.BoxLayout(datePanel, javax.swing.BoxLayout.LINE_AXIS));

        jLabel6.setText("Date");
        jLabel6.setMaximumSize(new java.awt.Dimension(175, 16));
        jLabel6.setMinimumSize(new java.awt.Dimension(175, 16));
        jLabel6.setPreferredSize(new java.awt.Dimension(175, 16));
        datePanel.add(jLabel6);

        getContentPane().add(datePanel);

        jPanel7.setMaximumSize(new java.awt.Dimension(32767, 35));
        jPanel7.setMinimumSize(new java.awt.Dimension(0, 35));
        jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7, javax.swing.BoxLayout.LINE_AXIS));

        jLabel4.setText("Reason Template");
        jLabel4.setMaximumSize(new java.awt.Dimension(175, 16));
        jLabel4.setMinimumSize(new java.awt.Dimension(175, 16));
        jLabel4.setPreferredSize(new java.awt.Dimension(175, 16));
        jPanel7.add(jLabel4);

        templateCombo.setModel(templateComboBoxModel);
        templateCombo.setMaximumSize(new java.awt.Dimension(20000, 26));
        templateCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                templateComboActionPerformed(evt);
            }
        });
        jPanel7.add(templateCombo);

        jPanel8.setMaximumSize(new java.awt.Dimension(10, 5));
        jPanel8.setMinimumSize(new java.awt.Dimension(10, 5));
        jPanel8.setPreferredSize(new java.awt.Dimension(10, 5));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        jPanel7.add(jPanel8);

        templateBtn.setText("...");
        templateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                templateBtnActionPerformed(evt);
            }
        });
        jPanel7.add(templateBtn);

        getContentPane().add(jPanel7);

        jPanel9.setMaximumSize(new java.awt.Dimension(32767, 140));
        jPanel9.setMinimumSize(new java.awt.Dimension(0, 80));
        jPanel9.setPreferredSize(new java.awt.Dimension(400, 80));
        jPanel9.setLayout(new javax.swing.BoxLayout(jPanel9, javax.swing.BoxLayout.LINE_AXIS));

        jPanel2.setMaximumSize(new java.awt.Dimension(175, 32767));
        jPanel2.setMinimumSize(new java.awt.Dimension(175, 100));
        jPanel2.setPreferredSize(new java.awt.Dimension(175, 122));

        jLabel7.setText("Template Text");
        jLabel7.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel7.setMaximumSize(new java.awt.Dimension(175, 16));
        jLabel7.setMinimumSize(new java.awt.Dimension(175, 16));
        jLabel7.setPreferredSize(new java.awt.Dimension(175, 16));

        jLabel8.setText("Use this or use message ");
        jLabel8.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel8.setMaximumSize(new java.awt.Dimension(175, 16));
        jLabel8.setMinimumSize(new java.awt.Dimension(175, 16));
        jLabel8.setPreferredSize(new java.awt.Dimension(175, 16));

        jLabel9.setText("below.");
        jLabel9.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel9.setMaximumSize(new java.awt.Dimension(175, 16));
        jLabel9.setMinimumSize(new java.awt.Dimension(175, 16));
        jLabel9.setPreferredSize(new java.awt.Dimension(175, 16));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel9.add(jPanel2);

        reasonTxt.setEditable(false);
        reasonTxt.setColumns(20);
        reasonTxt.setLineWrap(true);
        reasonTxt.setRows(5);
        reasonTxt.setWrapStyleWord(true);
        jScrollPane2.setViewportView(reasonTxt);

        jPanel9.add(jScrollPane2);

        getContentPane().add(jPanel9);

        jPanel3.setMaximumSize(new java.awt.Dimension(32767, 60));
        jPanel3.setMinimumSize(new java.awt.Dimension(0, 60));
        jPanel3.setPreferredSize(new java.awt.Dimension(400, 60));
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        jLabel2.setText("Message to send");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel2.setMaximumSize(new java.awt.Dimension(175, 16));
        jLabel2.setMinimumSize(new java.awt.Dimension(175, 16));
        jLabel2.setPreferredSize(new java.awt.Dimension(175, 16));
        jPanel3.add(jLabel2);

        reasonText.setColumns(20);
        reasonText.setLineWrap(true);
        reasonText.setRows(5);
        reasonText.setWrapStyleWord(true);
        jScrollPane1.setViewportView(reasonText);

        jPanel3.add(jScrollPane1);

        getContentPane().add(jPanel3);

        jPanel1.setMaximumSize(new java.awt.Dimension(2000, 45));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        closeBtn.setText("Close");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });
        jPanel1.add(closeBtn);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 362, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 46, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel4);

        skipBtn.setText("Skip");
        skipBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skipBtnActionPerformed(evt);
            }
        });
        jPanel1.add(skipBtn);

        saveBtn.setText("Save and Notify");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        jPanel1.add(saveBtn);

        getContentPane().add(jPanel1);

        setSize(new java.awt.Dimension(621, 399));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        PersonnelChangeReasonController personnelFactory = PersonnelChangeReasonController.getInstance(companyId + "");

        boolean isValid = true;
        String validMsg = "";
        TemplateData template = null;
        PersonnelChange change = new PersonnelChange();
        try {
            template = (TemplateData) templateComboBoxModel.getElementAt(templateCombo.getSelectedIndex());
            change.setReasonId(template.getTemplateId());
        } catch (Exception exe) {
            
        }
        try {
            change.setClientId(clientModel.getClientAt(clientCombo.getSelectedIndex()).getClientId());
        } catch (Exception exe) {
            validMsg = "Please Select a Client!";
            isValid = false;
        }
        try {
            change.setEmployeeId(employeeModel.getEmployeeAt(employeeCombo.getSelectedIndex()).getEmployeeId());
        } catch (Exception exe) {
            validMsg = "Please Select a Employee!";
            isValid = false;
        }
        change.setUserId(Integer.parseInt(Main_Window.parentOfApplication.getUser().getUserId()));
        change.setReasonText(reasonText.getText());
        change.setTemplateText(template.getTemplateValue());
        try {
            change.setDateOfChange(dateCal.getCalendar().getTime());
        } catch (Exception exe) {
            validMsg = "Please Select a Date!";
            isValid = false;
        }

        try {
            if (isValid) {
                personnelFactory.savePersonnelChange(change);
                JOptionPane.showMessageDialog(Main_Window.parentOfApplication, "Personnel Change Saved!", "Saved", JOptionPane.OK_OPTION);
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(Main_Window.parentOfApplication,
                        "Error saving Data: " + validMsg, "Error Saving", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception exe) {
            exe.printStackTrace();
        }
    }//GEN-LAST:event_saveBtnActionPerformed

    public int getTemplateType() {
        return 4;
    }

    private void templateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_templateBtnActionPerformed
        if (Main_Window.parentOfApplication.checkSecurity(security_detail.MODULES.ADMIN_USER)) {
            TemplateDiagForm templateForm = new TemplateDiagForm();
            templateForm.init(this.initTemplateSystem());
            templateForm.pack();
            templateForm.setVisible(true);
            this.viewController();
        } else {
            JOptionPane.showMessageDialog(Main_Window.parentOfApplication, "You must be an admin user to modify templates!", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_templateBtnActionPerformed

    private void templateComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_templateComboActionPerformed
        TemplateData template = (TemplateData) templateComboBoxModel.getElementAt(templateCombo.getSelectedIndex());
        reasonTxt.setText(template.getTemplateValue());
    }//GEN-LAST:event_templateComboActionPerformed

    private void skipBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skipBtnActionPerformed
        PersonnelChangeReasonController personnelFactory = PersonnelChangeReasonController.getInstance(companyId + "");

        boolean isValid = true;
        String validMsg = "";
        PersonnelChange change = new PersonnelChange();
        change.setReasonId(-1);

        try {
            change.setClientId(clientModel.getClientAt(clientCombo.getSelectedIndex()).getClientId());
        } catch (Exception exe) {

        }
        try {
            change.setEmployeeId(employeeModel.getEmployeeAt(employeeCombo.getSelectedIndex()).getEmployeeId());
        } catch (Exception exe) {

        }
        change.setUserId(Integer.parseInt(Main_Window.parentOfApplication.getUser().getUserId()));
        change.setReasonText("");
        try {
            change.setDateOfChange(dateCal.getCalendar().getTime());
            change.setDateSent(dateCal.getCalendar().getTime());
        } catch (Exception exe) {

        }

        try {
            if (isValid) {
                personnelFactory.savePersonnelChange(change);
                JOptionPane.showMessageDialog(Main_Window.parentOfApplication, "Personnel Change Skipped!", "Saved", JOptionPane.OK_OPTION);
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(Main_Window.parentOfApplication,
                        "Error saving Data: " + validMsg, "Error Saving", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception exe) {
            exe.printStackTrace();
        }
    }//GEN-LAST:event_skipBtnActionPerformed

    private void viewController() {
        TemplateController templateController = TemplateController.getInstance();
        LinkedHashMap<Integer, TemplateData> templates = templateController.reloadTemplates(companyId, this.getTemplateType());

        try {
            if (templates.isEmpty()) {
                this.templateCombo.setVisible(false);
            } else {
                this.templateCombo.setVisible(true);
                templateComboBoxModel.setData(templates);

                if (templateController.hasNewSave()) {
                    this.templateCombo.setSelectedIndex(templateController.getNewTemplateIndex());
                    templateController.resetAfterSave();
                } else {
                    this.templateCombo.setSelectedIndex(0);
                }
                this.templateCombo.revalidate();
                this.templateCombo.repaint();
            }
        } catch (Exception exe) {}
    }

    private class ClientComboModel implements ComboBoxModel {

        private int selectedIndex = -1;
        private ArrayList<Client> clients = new ArrayList<Client>();

        public ArrayList<Client> getClients() {
            return this.clients;
        }

        public void setClients(ArrayList<Client> users) {
            this.clients = users;
        }

        public void setSelectedItem(Object anItem) {
            selectedIndex = -1;
            if (anItem instanceof Client) {
                Client currUser = (Client) anItem;
                for (int u = 0; u < clients.size(); u++) {
                    if (currUser.getClientId().equals(clients.get(u).getClientId())) {
                        selectedIndex = u;
                    }
                }
            } else if (anItem instanceof Integer) {
                for (int u = 0; u < clients.size(); u++) {
                    if (anItem.equals(clients.get(u).getClientId())) {
                        selectedIndex = u;
                    }
                }
            }
        }

        public void setSelectedIndex(int newIndex) {
            selectedIndex = newIndex;
        }

        public Object getSelectedItem() {
            if (selectedIndex >= 0) {
                return clients.get(selectedIndex);
            }
            return "Please select a Client";
        }

        public int getSize() {
            return clients.size();
        }

        public Object getElementAt(int index) {
            return clients.get(index);
        }

        public Client getClientAt(int index) {
            return clients.get(index);
        }

        public void addListDataListener(ListDataListener l) {
        }

        public void removeListDataListener(ListDataListener l) {
        }
    }

    private class EmployeeComboModel implements ComboBoxModel {

        private int selectedIndex = -1;
        private ArrayList<Employee> employees = new ArrayList<Employee>();

        public ArrayList<Employee> getEmployees() {
            return this.employees;
        }

        public void setEmployees(ArrayList<Employee> users) {
            this.employees = users;
        }

        public void setSelectedItem(Object anItem) {
            selectedIndex = -1;
            if (anItem instanceof Employee) {
                Employee currUser = (Employee) anItem;
                for (int u = 0; u < employees.size(); u++) {
                    if (currUser.getEmployeeId().equals(employees.get(u).getEmployeeId())) {
                        selectedIndex = u;
                    }
                }
            } else if (anItem instanceof Integer) {
                for (int u = 0; u < employees.size(); u++) {
                    if (anItem.equals(employees.get(u).getEmployeeId())) {
                        selectedIndex = u;
                    }
                }
            }
        }

        public void setSelectedIndex(int newIndex) {
            selectedIndex = newIndex;
        }

        public Object getSelectedItem() {
            if (selectedIndex >= 0) {
                return employees.get(selectedIndex);
            }
            return "Please select an Employee";
        }

        public int getSize() {
            return employees.size();
        }

        public Object getElementAt(int index) {
            return employees.get(index);
        }

        public Employee getEmployeeAt(int index) {
            return employees.get(index);
        }

        public void addListDataListener(ListDataListener l) {
        }

        public void removeListDataListener(ListDataListener l) {
        }
    }

    private class PersonnelReasonComboModel implements ComboBoxModel {

        private int selectedIndex = -1;
        private ArrayList<PersonnelChangeReason> reasons = new ArrayList<PersonnelChangeReason>();

        public ArrayList<PersonnelChangeReason> getReasons() {
            return this.reasons;
        }

        public void setReasons(ArrayList<PersonnelChangeReason> reasons) {
            this.reasons = reasons;
        }

        public void setSelectedItem(Object anItem) {
            selectedIndex = -1;
            if (anItem instanceof PersonnelChangeReason) {
                PersonnelChangeReason currUser = (PersonnelChangeReason) anItem;
                for (int u = 0; u < reasons.size(); u++) {
                    if (currUser.getReason_id().equals(reasons.get(u).getReason_id())) {
                        selectedIndex = u;
                    }
                }
            } else if (anItem instanceof Integer) {
                for (int u = 0; u < reasons.size(); u++) {
                    if (anItem.equals(reasons.get(u).getReason_id())) {
                        selectedIndex = u;
                    }
                }
            }
        }

        public void setSelectedIndex(int newIndex) {
            selectedIndex = newIndex;
        }

        public Object getSelectedItem() {
            if (selectedIndex >= 0) {
                return reasons.get(selectedIndex);
            }
            return "Please select a Reason";
        }

        public int getSize() {
            return reasons.size();
        }

        public PersonnelChangeReason getReasonAt(int index) {
            return reasons.get(index);
        }

        public Object getElementAt(int index) {
            return reasons.get(index);
        }

        public void addListDataListener(ListDataListener l) {
        }

        public void removeListDataListener(ListDataListener l) {
        }
    }

    public InitializeTemplateSystem initTemplateSystem() {
        String incomingText = "";
        String templateName = "";
        TemplateController templateController = TemplateController.getInstance();

        InitializeTemplateSystem init = ((incomingText.length() > 0) && (templateName.length() == 0))
                ? new InitializeTemplateSystem.Builder(companyId, branchId, getTemplateType(), templateController).incomingText(incomingText).build()
                : new InitializeTemplateSystem.Builder(companyId, branchId, getTemplateType(), templateController).build();

        return init;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox clientCombo;
    private javax.swing.JButton closeBtn;
    private javax.swing.JPanel datePanel;
    private javax.swing.JComboBox employeeCombo;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea reasonText;
    private javax.swing.JTextArea reasonTxt;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton skipBtn;
    private javax.swing.JButton templateBtn;
    private javax.swing.JComboBox templateCombo;
    // End of variables declaration//GEN-END:variables
}
