/**
 *  Filename:  Phone_Messaging.java
 *  Author:  Jeffrey N. Davis
 *  Date Created:  05/21/2010
 *  Date last modified:  05/21/2010
 *  Last modified by:  Jeffrey N. Davis
 *  Pupose of File:  File contains the Phone_Messaging class which is designed
 *      to send out a phone call to any employees within a particular branch
 *      of a company
 *  NOTE:  Design is currently one way.  Once all forms of messaging are
 *      implemented, a two way design to receieve a response from the employee
 *      will be added.
 */

//  package declaration
package rmischedule.messaging.components;

//  import declarations
import javax.swing.JPanel;
import rmischedule.components.graphicalcomponents.GenericEditSubForm;
import rmischedule.main.Main_Window;
import rmischedule.messaging.xMessagingEdit;
import rmischedule.security.security_detail;
import schedfoxlib.model.util.Record_Set;
import rmischeduleserver.mysqlconnectivity.queries.GeneralQueryFormat;

/**
 *  Class Name:  Phone_Messaging
 *  Purpose of Class:  Class is a tabbed form within "Employee Messaging" tab
 *      that is designed specifically to send out phone calls to employees.  See
 *      NOTE
 */
public class Phone_Messaging extends GenericEditSubForm
{
    //  private variable declarations
    private xMessagingEdit myParent;

    //  private method implementations

    //  public method implementations
    /**
     *  Class Name:  Phone_Messaging
     *  Purpose of Method:  Constructor for Email_Messaging class
     *  Arguments:  an instance of xMessagingEdit
     *  Returns:  none
     *  Precondition:  Object not created
     *  Postcondition:  instance of object created, initial variables set
     */
    public Phone_Messaging(xMessagingEdit main)
    {
        //  assign values to class private variables
        myParent = main;

        //  initializa Swing components
        initComponents();
    }

    //  abstract method implementations
    @Override
    public GeneralQueryFormat getQuery(boolean isSelected) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public GeneralQueryFormat getSaveQuery(boolean isNewData) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void loadData(Record_Set rs) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public boolean needsMoreRecordSets() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    /*
     *  Method Name:  getMyTabTitle
     *  Purpose of Method:  returns the tab panel title
     *  Arguments:  none
     *  Returns:  a string containing the name of the tab
     *  Postcondition:  Tab title known internally, not known outside of class
     *  Postcondition:  tab title returned
     *  Implements:  getMyTabTitle from GenericEditSubForm
     */
    @Override
    public String getMyTabTitle()
    {
        return "Phone";
    }

    /*
     *  Method Name:  getMyForm
     *  Purpose of Method:  returns the JPanel constructed by this class
     *  Arguments:  none
     *  Returns:  JPanel
     *  Postcondition:  JPanel constructed internally, not known outside of
     *      class
     *  Postcondition:  JPanel returned outside of class to be displayed
     *  Implements:  getMyForm from GenericEditSubForm
     */
    @Override
    public JPanel getMyForm()
    {
        return this;
    }

    /*
     *  Method name:  doOnClear 
     *  Purpose of Method:  describes the actions taken when the tab is
     *      loaded or cleared
     *  Arguments:  none
     *  Returns:  void
     *  Precondition:  Object needs to reinitialize 
     *  Postcondition:  Object reinitialized
     *  Implements:  doOnClear from GenericEditForm
     */
    @Override
    public void doOnClear()
    {
        System.out.println("doOnClear method run from Phone_Messaging class.");
    }

    /*
     *  Method Name:  userHasAccess
     *  Purpose of Method:  returns the security level that this class is 
     *      eligible
     *  Arguments:  none
     *  Returns:  the security boolean
     *  Postcondition:  security level unknown
     *  Postcondition:  security level known, returned
     *  Implements:  userHasAccess from GenericEditSubForm
     */
    @Override
    public boolean userHasAccess()
    {
        return Main_Window.parentOfApplication.checkSecurity(
            security_detail.MODULES.EMPLOYEE_EDIT);
    }

    //  Java Swing code
   /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();

        jTextField1.setText("Phone Messaging Tab has not been implemented yet.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(120, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
};
