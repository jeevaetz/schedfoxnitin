/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InvoiceClientManagement.java
 *
 * Created on Nov 21, 2011, 12:28:34 PM
 */
package rmischedule.invoicing;

import com.creamtec.ajaxswing.AjaxSwingManager;
import com.creamtec.ajaxswing.core.ClientAgent;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import rmischedule.components.ManagementClientInvoiceModel;
import rmischedule.data_connection.Connection;
import rmischedule.ireports.viewer.IReportViewer;
import rmischedule.main.Main_Window;
import rmischedule.messaging.email.SchedfoxEmail;
import rmischeduleserver.RMIScheduleServerImpl;
import rmischeduleserver.control.ManagementClientController;
import schedfoxlib.model.Company;
import schedfoxlib.model.ManagementClient;
import schedfoxlib.model.ManagementClientInvoice;

/**
 *
 * @author user
 */
public class InvoiceClientManagement extends javax.swing.JInternalFrame {

    private ManagementClientController clientController = ManagementClientController.getInstance("");
    private ManagementClientInvoiceModel invoiceModel;

    /**
     * Creates new form InvoiceClientManagement
     */
    public InvoiceClientManagement() {
        invoiceModel = new ManagementClientInvoiceModel();
        initComponents();

        ArrayList<Integer> managementClients = this.loadData();
        clientController.runInvoicing(managementClients);

        clientManagementList.addListSelectionListener(new InvoiceSelectionListener());
    }

    private ArrayList<Integer> loadData() {
        ArrayList<ManagementClient> clients = clientController.getManagementClientsWithInvoicing();
        DefaultListModel model = (DefaultListModel) clientManagementList.getModel();
        ArrayList<Integer> retVal = new ArrayList<Integer>();
        for (int c = 0; c < clients.size(); c++) {
            model.add(c, clients.get(c));
            retVal.add(clients.get(c).getManagement_id());
        }
        return retVal;
    }

    private void displayInvoices(ManagementClient client) {
        invoiceModel.clearData();
        BigDecimal amountToBill = client.getAmount_to_bill();
        NumberFormat myFormat = NumberFormat.getCurrencyInstance();
        billAmountLabel.setText(myFormat.format(amountToBill));

        ArrayList<ManagementClientInvoice> invoices = clientController.getClientInvoices(client.getManagement_id());
        for (int i = 0; i < invoices.size(); i++) {
            invoiceModel.addInvoice(invoices.get(i));
        }

    }

    private class InvoiceSelectionListener implements ListSelectionListener {

        public void valueChanged(ListSelectionEvent e) {
            try {
                ManagementClient client = (ManagementClient) clientManagementList.getSelectedValue();
                displayInvoices(client);
            } catch (Exception exe) {
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientManagementList = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        billAmountLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        printInvoices1 = new javax.swing.JButton();
        printInvoices = new javax.swing.JButton();
        emailInvoices = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        contractTable = new javax.swing.JTable();

        setClosable(true);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Ready Invoices"));
        jPanel1.setMaximumSize(new java.awt.Dimension(200, 32767));
        jPanel1.setMinimumSize(new java.awt.Dimension(200, 100));
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 372));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        clientManagementList.setModel(new DefaultListModel());
        jScrollPane1.setViewportView(clientManagementList);

        jPanel1.add(jScrollPane1);

        getContentPane().add(jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Invoice Information"));
        jPanel2.setMaximumSize(new java.awt.Dimension(5000, 5000));
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

        jPanel5.setMaximumSize(new java.awt.Dimension(2000, 35));
        jPanel5.setMinimumSize(new java.awt.Dimension(300, 35));
        jPanel5.setPreferredSize(new java.awt.Dimension(679, 35));
        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.LINE_AXIS));

        jLabel1.setText("Weekly Base Bill Amount  ");
        jLabel1.setMaximumSize(new java.awt.Dimension(85, 35));
        jPanel5.add(jLabel1);

        billAmountLabel.setMaximumSize(new java.awt.Dimension(75, 35));
        billAmountLabel.setMinimumSize(new java.awt.Dimension(75, 16));
        billAmountLabel.setPreferredSize(new java.awt.Dimension(75, 17));
        jPanel5.add(billAmountLabel);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 35, Short.MAX_VALUE)
        );

        jPanel5.add(jPanel3);

        printInvoices1.setText("Print All Invoices");
        printInvoices1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printInvoices1ActionPerformed(evt);
            }
        });
        jPanel5.add(printInvoices1);

        printInvoices.setText("Print Selected Invoices");
        printInvoices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printInvoicesActionPerformed(evt);
            }
        });
        jPanel5.add(printInvoices);

        emailInvoices.setText("Email Selected Invoices");
        emailInvoices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailInvoicesActionPerformed(evt);
            }
        });
        jPanel5.add(emailInvoices);

        jPanel2.add(jPanel5);

        jPanel4.setLayout(new java.awt.GridLayout(1, 0));

        contractTable.setModel(invoiceModel);
        jScrollPane2.setViewportView(contractTable);

        jPanel4.add(jScrollPane2);

        jPanel2.add(jPanel4);

        getContentPane().add(jPanel2);

        setBounds(0, 0, 919, 488);
    }// </editor-fold>//GEN-END:initComponents

    private JasperPrint getAllPrints() {
        ArrayList<ManagementClientInvoice> selectedInvoices = new ArrayList<ManagementClientInvoice>();
        for (int c = 0; c < clientManagementList.getVisibleRowCount(); c++) {
            ManagementClient currClient = (ManagementClient) clientManagementList.getModel().getElementAt(c);
            ArrayList<ManagementClientInvoice> invoices = clientController.getClientInvoices(currClient.getManagement_id());
            selectedInvoices.add(invoices.get(0));
        }

        Connection myConn = new Connection();
        myConn.myCompany = "";
        myConn.myBranch = "";
        JasperPrint report = null;
        if (selectedInvoices.size() > 0) {
            for (int s = 0; s < selectedInvoices.size(); s++) {
                InputStream reportStream
                        = getClass().getResourceAsStream("/rmischedule/ireports/invoice.jasper");
                try {
                    ManagementClient client = clientController.getManagementClientById(selectedInvoices.get(s).getManagement_id());
                    Hashtable parameters = new Hashtable();
                    ArrayList<Integer> myInvoices = new ArrayList<Integer>();
                    myInvoices.add(selectedInvoices.get(s).getManagement_client_invoice_id());
                    parameters.put("invoices", myInvoices);
                    parameters.put("company_name", client.getManagement_client_name());
                    parameters.put("address", client.getManagement_client_address());
                    parameters.put("csv", client.getManagement_client_city() + ", " + client.getManagement_client_state() + " " + client.getManagement_client_zip());

                    try {
                        ArrayList<Company> companies = clientController.getCompaniesForManagementClient(selectedInvoices.get(s).getManagement_id());
                        parameters.put("clients_count", clientController.getActiveClientCount(companies));
                        parameters.put("employees_count", clientController.getActiveEmployeeCount(companies));
                    } catch (Exception exe) {
                    }

                    if (report == null) {
                        report = JasperFillManager.fillReport(reportStream, parameters, RMIScheduleServerImpl.getConnection().generateConnection());
                    } else {
                        JasperPrint myPrint = JasperFillManager.fillReport(reportStream, parameters, RMIScheduleServerImpl.getConnection().generateConnection());
                        for (int m = 0; m < myPrint.getPages().size(); m++) {
                            report.addPage(myPrint.getPages().get(m));
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(Main_Window.parentOfApplication, "No invoices to print!", "No invoices to print", JOptionPane.ERROR_MESSAGE);
        }
        return report;
    }

    private JasperPrint getJasperPrintForReport() {
        int[] rows = contractTable.getSelectedRows();
        ArrayList<Integer> selectedInvoices = new ArrayList<Integer>();
        for (int r = 0; r < rows.length; r++) {
            selectedInvoices.add(invoiceModel.getAccrual(rows[r]).getManagement_client_invoice_id());
        }
        InputStream reportStream
                = getClass().getResourceAsStream("/rmischedule/ireports/invoice.jasper");
        Connection myConn = new Connection();
        myConn.myCompany = "";
        myConn.myBranch = "";
        JasperPrint report = null;
        if (rows.length > 0) {
            try {
                ManagementClient client = clientController.getManagementClientById(invoiceModel.getAccrual(rows[0]).getManagement_id());
                Hashtable parameters = new Hashtable();
                parameters.put("invoices", selectedInvoices);
                parameters.put("company_name", client.getManagement_client_name());
                parameters.put("address", client.getManagement_client_address());
                parameters.put("csv", client.getManagement_client_city() + ", " + client.getManagement_client_state() + " " + client.getManagement_client_zip());

                try {
                    ArrayList<Company> companies = clientController.getCompaniesForManagementClient(invoiceModel.getAccrual(rows[0]).getManagement_id());
                    parameters.put("clients_count", clientController.getActiveClientCount(companies));
                    parameters.put("employees_count", clientController.getActiveEmployeeCount(companies));
                } catch (Exception exe) {
                }

                report = JasperFillManager.fillReport(reportStream, parameters, RMIScheduleServerImpl.getConnection().generateConnection());
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(Main_Window.parentOfApplication, "Please select a invoice!", "Please select a invoice!", JOptionPane.ERROR_MESSAGE);
        }
        return report;
    }

    private void printInvoicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printInvoicesActionPerformed
        try {
            JasperPrint report = getJasperPrintForReport();
            if (report != null) {
                if (AjaxSwingManager.isAjaxSwingRunning()) {
                    byte[] fileBytes = JasperExportManager.exportReportToPdf(report);
                    ClientAgent.getCurrentInstance().print(fileBytes);
                } else {
                    IReportViewer viewer = new IReportViewer(report);
                    Main_Window.parentOfApplication.desktop.add(viewer);
                    viewer.showForm();
                }
            }
        } catch (Exception e) {
        }

    }//GEN-LAST:event_printInvoicesActionPerformed

    private void emailInvoicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailInvoicesActionPerformed
        try {
            int[] rows = contractTable.getSelectedRows();

            JasperPrint report = getJasperPrintForReport();
            ManagementClient client = clientController.getManagementClientById(invoiceModel.getAccrual(rows[0]).getManagement_id());
            int result = JOptionPane.showConfirmDialog(Main_Window.parentOfApplication, "Would you like to email the invoice to " + client.getManagement_client_email()
                    + "", "Confirm Email", JOptionPane.YES_NO_OPTION);
            if (report != null && result == JOptionPane.YES_OPTION) {
                String inputValue = JOptionPane.showInputDialog(Main_Window.parentOfApplication, "Enter in the message to use in the email, or leave it blank for the default.",
                        "Custom Message", JOptionPane.OK_OPTION);

                ByteArrayOutputStream oStream = new ByteArrayOutputStream();
                JasperExportManager.exportReportToPdfStream(report, oStream);
                StringBuilder body = new StringBuilder();
                if (inputValue != null && inputValue.length() > 0) {
                    body.append(inputValue);
                } else {
                    body.append("Attached you will find your Schedfox invoice, please submit payment as directed on the document. Thank you for using Schedfox!");
                }

                HashMap<String, String> contactInfo = new HashMap<String, String>();
                if (client.getManagement_client_email() != null && client.getManagement_client_email().length() > 5) {
                    contactInfo.put(client.getManagement_client_email(), client.getManagement_client_email());
                }
                if (client.getManagement_billing_email1() != null && client.getManagement_billing_email1().length() > 5) {
                    contactInfo.put(client.getManagement_billing_email1(), client.getManagement_billing_email1());
                }
                if (client.getManagement_billing_email2() != null && client.getManagement_billing_email2().length() > 5) {
                    contactInfo.put(client.getManagement_billing_email2(), client.getManagement_billing_email2());
                }
                contactInfo.put("jc@champ.net", "jc@champ.net");

                String[] contacts = new String[contactInfo.size()];
                Iterator<String> keys = contactInfo.keySet().iterator();
                int i = 0;
                while (keys.hasNext()) {
                    contacts[i] = keys.next();
                    i++;
                }

                new SchedfoxEmail("Schedfox Invoice", body.toString(), contacts, oStream.toByteArray(), true, "Schedfox Invoice");

            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_emailInvoicesActionPerformed

    private void printInvoices1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printInvoices1ActionPerformed
        try {
            JasperPrint report = getAllPrints();
            if (report != null) {
                if (AjaxSwingManager.isAjaxSwingRunning()) {
                    byte[] fileBytes = JasperExportManager.exportReportToPdf(report);
                    ClientAgent.getCurrentInstance().print(fileBytes);
                } else {
                    IReportViewer viewer = new IReportViewer(report);
                    Main_Window.parentOfApplication.desktop.add(viewer);
                    viewer.showForm();
                }
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_printInvoices1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel billAmountLabel;
    private javax.swing.JList clientManagementList;
    private javax.swing.JTable contractTable;
    private javax.swing.JButton emailInvoices;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton printInvoices;
    private javax.swing.JButton printInvoices1;
    // End of variables declaration//GEN-END:variables
}
