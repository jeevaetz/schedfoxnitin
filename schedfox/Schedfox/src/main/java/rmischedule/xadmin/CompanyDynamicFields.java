/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CompanyDynamicFields.java
 *
 * Created on Aug 12, 2010, 10:41:49 AM
 */

package rmischedule.xadmin;

import java.util.Vector;
import javax.swing.JPanel;
import rmischedule.components.graphicalcomponents.GenericEditSubForm;
import rmischedule.data_connection.Connection;
import rmischedule.xadmin.components.CreateDynamicField;
import rmischeduleserver.control.model.DynamicFieldDef;
import rmischedule.xadmin.model.DynamicFieldLocation;
import rmischedule.xadmin.model.DynamicFieldType;
import schedfoxlib.model.util.Record_Set;
import rmischeduleserver.mysqlconnectivity.queries.GeneralQueryFormat;
import rmischeduleserver.mysqlconnectivity.queries.admin.get_dynamic_field_def_query;
import rmischeduleserver.mysqlconnectivity.queries.admin.get_dynamic_field_locations_query;
import rmischeduleserver.mysqlconnectivity.queries.admin.get_dynamic_field_queries;
import rmischeduleserver.mysqlconnectivity.queries.admin.get_dynamic_field_types_query;

/**
 *
 * @author user
 */
public class CompanyDynamicFields extends GenericEditSubForm  {

    private xCompanyEdit myParent;
    private Vector<DynamicFieldLocation> fieldLocations;
    private Vector<DynamicFieldType> fieldTypes;

    /** Creates new form CompanyDynamicFields */
    public CompanyDynamicFields(xCompanyEdit myParent) {
        initComponents();
        this.myParent = myParent;

        this.fieldLocations = this.getFieldLocations();
        this.fieldTypes = this.getFieldTypes();
    }

    /**
     * Grabs our locations to pass to our graphical sub components.
     * @return
     */
    private Vector<DynamicFieldLocation> getFieldLocations() {
        get_dynamic_field_locations_query getFieldLocationsQuery = new get_dynamic_field_locations_query();
        Vector<DynamicFieldLocation> retVal = new Vector<DynamicFieldLocation>();
        Connection myConn = new Connection();
        Record_Set rst = myConn.executeQuery(getFieldLocationsQuery);
        for (int r = 0; r < rst.length(); r++) {
            DynamicFieldLocation fieldLocation = new DynamicFieldLocation();
            fieldLocation.setId(rst.getInt("dynamic_field_location_id"));
            fieldLocation.setValue(rst.getString("dynamic_field_location_value"));
            retVal.add(fieldLocation);
            rst.moveNext();
        }
        return retVal;
    }

    /**
     * Reloads all of the data.
     */
    public void reloadData() {
        GeneralQueryFormat myQuery = getQuery(true);
        Connection myConn = myParent.getConnection();
        myConn.setCompany(this.myParent.getMyIdForSave());
        Record_Set rst = myConn.executeQuery(myQuery);
        this.loadData(rst);
    }

    public xCompanyEdit getMyParent() {
        return myParent;
    }

    private Vector<DynamicFieldType> getFieldTypes() {
        get_dynamic_field_types_query getFieldTypesQuery = new get_dynamic_field_types_query();
        Vector<DynamicFieldType> retVal = new Vector<DynamicFieldType>();
        Connection myConn = new Connection();
        Record_Set rst = myConn.executeQuery(getFieldTypesQuery);
        for (int r = 0; r < rst.length(); r++) {
            DynamicFieldType fieldType = new DynamicFieldType();
            fieldType.setId(rst.getInt("dynamic_field_type_id"));
            fieldType.setValue(rst.getString("dynamic_field_type_value"));
            retVal.add(fieldType);
            rst.moveNext();
        }
        return retVal;
    }

    private Vector<DynamicFieldDef> getFieldDef(Record_Set rst) {
        Vector<DynamicFieldDef> retVal = new Vector<DynamicFieldDef>();
        for (int r = 0; r < rst.length(); r++) {
            DynamicFieldDef fieldDef = new DynamicFieldDef();
            fieldDef.setId(rst.getInt("dynamic_field_def_id"));
            fieldDef.setName(rst.getString("dynamic_field_def_name"));
            fieldDef.setFieldTypeId(rst.getInt("dynamic_field_type_id"));
            fieldDef.setFieldLocationId(rst.getInt("dynamic_field_location_id"));
            fieldDef.setDynamicFieldDefDefault(rst.getString("dynamic_field_def_default"));
            fieldDef.setIsRequired(rst.getBoolean("is_required"));
            fieldDef.setIsActive(rst.getBoolean("is_active"));
            fieldDef.setShowInClientLogin(rst.getBoolean("display_in_client"));
            fieldDef.setShowInEmployeeLogin(rst.getBoolean("display_in_employee"));
            retVal.add(fieldDef);
            rst.moveNext();
        }
        return retVal;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMainScrollPane = new javax.swing.JScrollPane();
        jMainPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jMainPanel.setLayout(new javax.swing.BoxLayout(jMainPanel, javax.swing.BoxLayout.Y_AXIS));
        jMainScrollPane.setViewportView(jMainPanel);

        add(jMainScrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public GeneralQueryFormat getQuery(boolean isSelected) {
        get_dynamic_field_def_query getFieldDefsQuery = new get_dynamic_field_def_query();
        return getFieldDefsQuery;
    }

    @Override
    public GeneralQueryFormat getSaveQuery(boolean isNewData) {
        return new get_dynamic_field_queries();
    }

    @Override
    public void loadData(Record_Set rs) {
        Vector<DynamicFieldDef> fieldDefs = this.getFieldDef(rs);
        this.jMainPanel.removeAll();
        for (int fd = 0; fd < fieldDefs.size(); fd++) {
            CreateDynamicField myField = new CreateDynamicField(this, fieldLocations, fieldTypes, fieldDefs.get(fd));
            this.jMainPanel.add(myField);
        }

        CreateDynamicField myField = new CreateDynamicField(this, fieldLocations, fieldTypes, new DynamicFieldDef());
        this.jMainPanel.add(myField);

        this.revalidate();
    }

    @Override
    public boolean needsMoreRecordSets() {
        return false;
    }



    @Override
    public String getMyTabTitle() {
        return "Dynamic Fields";
    }

    @Override
    public JPanel getMyForm() {
        return this;
    }

    @Override
    public void doOnClear() {
        
    }

    @Override
    public boolean userHasAccess() {
        return true;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jMainPanel;
    private javax.swing.JScrollPane jMainScrollPane;
    // End of variables declaration//GEN-END:variables

}
