/*
 * optionWindow.java
 *
 * Created on September 1, 2005, 5:15 PM
 */

package rmischedule.options.optionsgraphical;
import rmischedule.main.Main_Window;
import rmischedule.options.*;
import rmischedule.options.optionsgraphical.*;
import java.util.*;
import javax.swing.*;
/**
 *
 * @author  Ira Juneau
 */
public class optionWindow extends javax.swing.JInternalFrame {
    
    private Hashtable<String, JPanel> myCategoryPanels;
    private int RequestedAccess;
    
    /** Creates new form optionWindow 
  Access Level controls if you want to read and write from what level as defined in the IndividualOption
  for basic settins choose user, for admin at company level choose client, for root choose root....
     */
    public optionWindow(int desiredAccessLevel) {
        initComponents();
        RequestedAccess = desiredAccessLevel;
        ArrayList<IndividualOption> myArrayOfOptions = Main_Window.parentOfApplication.newOptions.getArrayOfComponents();
        myCategoryPanels = new Hashtable(myArrayOfOptions.size());
        JPanel activePanel = null;
        for (int i = 0; i < myArrayOfOptions.size(); i++) {
            activePanel = testAndAddTab(myArrayOfOptions.get(i).getMyCategory());
            try {
                activePanel.add(myArrayOfOptions.get(i).getGraphicalComponent(RequestedAccess));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    public JPanel testAndAddTab(String category) {
        JPanel categoryPanel = null;
        categoryPanel = myCategoryPanels.get(category);
        if (categoryPanel == null) {
            categoryPanel = new JPanel();
            categoryPanel.setLayout(new BoxLayout(categoryPanel, BoxLayout.Y_AXIS));
            myCategoryPanels.put(category, categoryPanel);
            myTabbedPanel.addTab(category, categoryPanel);
        }
        return categoryPanel;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        myTabbedPanel = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        ExitBtn = new javax.swing.JButton();

        setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(3, 3, 3, 3), new java.awt.Color(123, 117, 175)), new javax.swing.border.LineBorder(new java.awt.Color(123, 117, 175), 3, true)));
        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setTitle("Options");
        setDoubleBuffered(true);
        jPanel1.setLayout(new java.awt.BorderLayout());

        myTabbedPanel.setFont(new java.awt.Font("Arial", 1, 10));
        jPanel1.add(myTabbedPanel, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.X_AXIS));

        jPanel2.add(jPanel3);

        ExitBtn.setText("Exit");
        ExitBtn.setMaximumSize(new java.awt.Dimension(80, 23));
        ExitBtn.setMinimumSize(new java.awt.Dimension(80, 23));
        ExitBtn.setPreferredSize(new java.awt.Dimension(80, 23));
        ExitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitBtnActionPerformed(evt);
            }
        });

        jPanel2.add(ExitBtn);

        jPanel1.add(jPanel2, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-500)/2, (screenSize.height-400)/2, 500, 400);
    }
    // </editor-fold>//GEN-END:initComponents

    private void ExitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitBtnActionPerformed
        setVisible(false);
        myReloadOptions myThread = new myReloadOptions();
        myThread.start();
    }//GEN-LAST:event_ExitBtnActionPerformed
    
    /**
     * Makes certain options have saved before reloading
     */
    private class myReloadOptions extends Thread {
        public myReloadOptions() {
            
        }
        
        public void run() {
            try {
                sleep(800);
            } catch (Exception e) {}
            Main_Window.parentOfApplication.reloadAllOptions();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ExitBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane myTabbedPanel;
    // End of variables declaration//GEN-END:variables
    
}
