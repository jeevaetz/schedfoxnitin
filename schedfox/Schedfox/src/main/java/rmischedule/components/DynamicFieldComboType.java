/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DynamicFieldComboType.java
 *
 * Created on Aug 20, 2010, 10:15:56 AM
 */

package rmischedule.components;

import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.swing.ComboBoxModel;
import javax.swing.JComponent;
import javax.swing.event.ListDataListener;
import rmischedule.xadmin.DynamicComboSetup;
import rmischedule.xadmin.model.DynamicFieldValue;

/**
 *
 * @author user
 */
public class DynamicFieldComboType extends javax.swing.JPanel implements DynamicFieldTypeInterface {

    private ArrayList<String> arrayValues;
    private StringComboModel comboModel;

    private static String unselectedValue = "Please select a value";

    /** Creates new form DynamicFieldComboType */
    public DynamicFieldComboType(boolean enabled) {
        comboModel = new StringComboModel();
        this.arrayValues = new ArrayList<String>();
        initComponents();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        myComboBox = new javax.swing.JComboBox();

        setLayout(new java.awt.GridLayout(1, 0));

        myComboBox.setModel(comboModel);
        add(myComboBox);
    }// </editor-fold>//GEN-END:initComponents

    public String getValue() {
        if (myComboBox.getSelectedItem().toString().equals(unselectedValue)) {
            return "";
        }
        return myComboBox.getSelectedItem().toString();
    }

    public void setValue(DynamicFieldValue value) {
        String fieldDefault = value.getFieldDefObj().getDynamicFieldDefDefault();
        try {
            StringTokenizer tokenizer = new StringTokenizer(fieldDefault, DynamicComboSetup.token, false);
            comboModel.clearElements();
            ArrayList<String> values = new ArrayList<String>();
            String selectedValue = "";
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (token.trim().length() > 0 && token.startsWith("{") && token.endsWith("}")) {
                    selectedValue = token.replaceAll("\\{", "").replaceAll("\\}", "");
                } else if (token.trim().length() > 0) {
                    comboModel.addElement(token);
                }
            }
            for (int v = 0; v < values.size(); v++) {
                comboModel.addElement(values.get(v));
            }
            if (value.getDynamic_field_value() != null && value.getDynamic_field_value().length() > 0) {
                this.myComboBox.setSelectedItem(value.getDynamic_field_value());
            } else {
                this.myComboBox.setSelectedItem(selectedValue);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public JComponent getComponent() {
        return this;
    }

    private class StringComboModel implements ComboBoxModel  {

        private int selectedIndex = -1;
        private ArrayList<String> arrayValues;

        public StringComboModel() {
            arrayValues = new ArrayList<String>();
        }

        public void clearElements() {
            arrayValues.clear();
        }

        @Override
        public int getSize() {
            return arrayValues.size();
        }

        public ArrayList<String> getValues() {
            return this.arrayValues;
        }

        public void removeElementAt(int index) {
            arrayValues.remove(index);
        }

        public void addElement(String element) {
            arrayValues.add(element);
        }

        public void editElement(String element, int index) {
            arrayValues.set(index, element);
        }

        @Override
        public Object getElementAt(int index) {
            return arrayValues.get(index);
        }

        public void setSelectedItem(Object anItem) {
            for (int i = 0; i < arrayValues.size(); i++) {
                if (arrayValues.get(i).equals(anItem.toString())) {
                    selectedIndex = i;
                }
            }
        }

        public Object getSelectedItem() {
            if (selectedIndex >= 0) {
                return this.getElementAt(selectedIndex);
            } else {
                return "Select a value";
            }
        }

        public void addListDataListener(ListDataListener l) {
            
        }

        public void removeListDataListener(ListDataListener l) {
            
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox myComboBox;
    // End of variables declaration//GEN-END:variables

}
