/*
 * PrettyButton.java
 *
 * Created on June 14, 2005, 8:46 AM
 */
package rmischedule.components.graphicalcomponents;

import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.*;

/**
 *
 * @author  ira
 *
 * Yes thats right prettybutton....I know aint it precious?
 */
public class PrettyButton extends DragAndDropLabel {

    private boolean showMe;
    private boolean hasDoneShow;
    
    public static final Color blueColor = new Color(209, 230, 250);
    public static final Color redColor = new Color(255, 102, 102);
    public static final Color bluePanelColor = new Color(231, 229, 247);
    public static final Color redPanelColor = new Color(247, 229, 229);
    public static final Color yellowColor = new Color(255, 255, 153);
    public static final Color greyColor = new Color(200, 200, 200);
    public static int blue = 1;
    public static int yellow = 2;
    public static int red = 3;
    public static int grey = 4;

    /** Creates new form PrettyButton */
    public PrettyButton(JLayeredPane panelToDisplayOn, Container panelContainingDropContainers, Object objectToPassOnDrop) {
        super(panelToDisplayOn, panelContainingDropContainers, objectToPassOnDrop);
        initComponents();
        showMe = true;
        hasDoneShow = false;
    }

    public void setText(String t) {
        myText.setText(t);
    }

    public void setMyFont(Font f) {
        myText.setFont(f);
    }

    public void setText(String t, String r) {
        myText.setText(t);
        myTextRight.setText(r);
    }

    /**
     * Obvious huh?
     */
    public Color getMyBackground() {
        return ContentPanel.getBackground();
    }

    public Color getPanelBackground() {
        if (ContentPanel.getBackground() == blueColor) {
            return bluePanelColor;
        } else {
            return redPanelColor;
        }
    }

    public void setVisible(boolean val) {
        showMe = val;
        hasDoneShow = true;
        //if (val) {
        //super.setVisible(true);
        //}
        super.setVisible(showMe);
    }

    public void setColorBlue(boolean yesDo) {
        if (yesDo) {
            ContentPanel.setBackground(blueColor);
        } else {
            ContentPanel.setBackground(redColor);
        }
        repaint();
    }

    public void setColorBlue(int newValue) {
        if (newValue == blue) {
            ContentPanel.setBackground(blueColor);
        } else if (newValue == red) {
            ContentPanel.setBackground(redColor);
        } else if (newValue == yellow) {
            ContentPanel.setBackground(yellowColor);
        } else if (newValue == grey) {
            ContentPanel.setBackground(greyColor);
        }
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (hasDoneShow) {
            hasDoneShow = false;
            super.setVisible(showMe);
        }

    }

    protected void MouseEntered() {
        // ContentPanel.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED)));
        //mod below
        //ContentPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED,new java.awt.Color(51, 0, 102), new java.awt.Color(0, 51, 204), null, new java.awt.Color(204, 204, 255)));
    }

    protected void MouseExited() {
        //mod below
        // ContentPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED,new java.awt.Color(51, 0, 102), new java.awt.Color(0, 51, 204), null, new java.awt.Color(204, 204, 255)));
        // ContentPanel.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ContentPanel = new javax.swing.JPanel();
        myText = new javax.swing.JLabel();
        myTextRight = new javax.swing.JLabel();
        dragAndDropLabel1 = new rmischedule.components.graphicalcomponents.DragAndDropLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setOpaque(false);
        setLayout(new java.awt.BorderLayout());

        ContentPanel.setBackground(new java.awt.Color(255, 255, 255));
        ContentPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ContentPanel.setLayout(new javax.swing.BoxLayout(ContentPanel, javax.swing.BoxLayout.LINE_AXIS));

        myText.setBackground(new java.awt.Color(255, 255, 255));
        myText.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 11));
        myText.setMaximumSize(new java.awt.Dimension(500, 500));
        ContentPanel.add(myText);

        myTextRight.setBackground(new java.awt.Color(255, 255, 255));
        myTextRight.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        myTextRight.setIconTextGap(2);
        ContentPanel.add(myTextRight);

        add(ContentPanel, java.awt.BorderLayout.CENTER);

        dragAndDropLabel1.setBackground(new java.awt.Color(255, 255, 255));
        dragAndDropLabel1.setOpaque(false);
        dragAndDropLabel1.setLayout(new java.awt.BorderLayout());
        add(dragAndDropLabel1, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JPanel ContentPanel;
    private rmischedule.components.graphicalcomponents.DragAndDropLabel dragAndDropLabel1;
    private javax.swing.JLabel myText;
    protected javax.swing.JLabel myTextRight;
    // End of variables declaration//GEN-END:variables
}
