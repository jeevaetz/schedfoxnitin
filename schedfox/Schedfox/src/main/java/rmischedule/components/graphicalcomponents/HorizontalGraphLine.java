/*
 * HorizontalGraphLine.java
 *
 * Created on March 2, 2005, 10:02 AM
 */

package rmischedule.components.graphicalcomponents;
import java.awt.Graphics;
import java.awt.Container;
import javax.swing.JFrame;
import java.awt.GridLayout;
import javax.swing.JPanel;
import java.awt.Color;
import java.awt.Cursor;
import rmischedule.components.*;
/**
 *
 * @author  ira
 */
public class HorizontalGraphLine extends javax.swing.JPanel {
    
    private HorizontalGraphObject parent;
    private int leftLocation;
    private int rightLocation;
    private int centerLocation;
    private int start;
    private int end;
    
    /** Creates new form HorizontalGraphLine */
    public HorizontalGraphLine(HorizontalGraphObject myParent, int startT, int endT) {
        
        parent = myParent;
        start = startT;
        end = endT;
        centerLocation = -1;
    }
    
    public void initMyComponents() {
        initComponents();
        addFadingComponents();
        DisplayPanel.setCursor(new Cursor(Cursor.MOVE_CURSOR));
        LeftHandle.setCursor(new Cursor(Cursor.W_RESIZE_CURSOR));
        RightHandle.setCursor(new Cursor(Cursor.E_RESIZE_CURSOR));
        leftLocation = this.getX();
        rightLocation = this.getX() + this.getWidth();
    }
    
    private void setStart(int newVal) {
        start = newVal;
        this.StartTimeSpinner.setValue(newVal);
    }
    
    private void setEnd(int newVal) {
        end = newVal;
        this.EndTimeSpinner.setValue(newVal);
    }
    
    public int getStart() {
        return start;
    }
    
    public int getEnd() {
        return end;
    }
    
    public void addFadingComponents() {
        Container currentContainer = DisplayPanel;
        DisplayPanel.setBackground(this.getBackground());
        Color origColor = this.getBackground();
        Color fadedColor = new Color(origColor.getRed() /2, origColor.getGreen() / 2, origColor.getBlue() / 2, 85);
        for (int i = 0; i < 7; i++) {
            currentContainer.setLayout(new GridLayout(2,1));
            JPanel clearPanel = new JPanel();
            clearPanel.setOpaque(false);
            currentContainer.add(clearPanel);
            JPanel fadedPanel = new JPanel();
            fadedPanel.setBackground(fadedColor);
            currentContainer.add(fadedPanel);
            currentContainer = fadedPanel;
        }
    }
    
    public void paint(Graphics g) {
        super.paint(g);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        MyMenu = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        StartTimeSpinner = new javax.swing.JSpinner();
        EndTimeSpinner = new javax.swing.JSpinner();
        LeftHandle = new javax.swing.JPanel();
        DisplayPanel = new javax.swing.JPanel();
        RightHandle = new javax.swing.JPanel();

        jMenuItem1.setText("Remove");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });

        MyMenu.add(jMenuItem1);

        StartTimeSpinner.setBackground(new java.awt.Color(0, 0, 204));
        StartTimeSpinner.setForeground(new java.awt.Color(255, 255, 255));
        EndTimeSpinner.setBackground(new java.awt.Color(0, 0, 204));
        EndTimeSpinner.setForeground(new java.awt.Color(255, 255, 255));
        EndTimeSpinner.setDoubleBuffered(true);

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));

        setBackground(new java.awt.Color(103, 103, 245));
        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        LeftHandle.setBackground(new java.awt.Color(255, 255, 255));
        LeftHandle.setMaximumSize(new java.awt.Dimension(4, 32767));
        LeftHandle.setMinimumSize(new java.awt.Dimension(4, 10));
        LeftHandle.setPreferredSize(new java.awt.Dimension(4, 10));
        LeftHandle.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                ResizeMeLeft(evt);
            }
        });
        LeftHandle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                GetInitialLeftPos(evt);
            }
        });

        add(LeftHandle);

        DisplayPanel.setLayout(new java.awt.GridLayout(2, 0));

        DisplayPanel.setBackground(new java.awt.Color(0, 0, 204));
        DisplayPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                DragMe(evt);
            }
        });
        DisplayPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                displayPopUpMenu(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                GetInitialCenterPos(evt);
            }
        });

        add(DisplayPanel);

        RightHandle.setBackground(new java.awt.Color(255, 255, 255));
        RightHandle.setMaximumSize(new java.awt.Dimension(4, 32767));
        RightHandle.setMinimumSize(new java.awt.Dimension(4, 10));
        RightHandle.setPreferredSize(new java.awt.Dimension(4, 10));
        RightHandle.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                ResizeMeRight(evt);
            }
        });
        RightHandle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                GetInitialRightPos(evt);
            }
        });

        add(RightHandle);

    }//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void displayPopUpMenu(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayPopUpMenu
        if (evt.getButton() == evt.BUTTON3) {
            MyMenu.show(DisplayPanel, evt.getX(), evt.getY());
            parent.removeLine(this);
        }
        
    }//GEN-LAST:event_displayPopUpMenu
    
    private void DragMe(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DragMe
        if (evt.getX() > centerLocation + parent.getUnitSize() && (parent.checkIfCanMoveForwards(this))) {
            setStart(start + parent.getUnitInc());
            setEnd(end + parent.getUnitInc());
        } else if (evt.getX() < centerLocation - parent.getUnitSize()&& (parent.checkIfCanMoveBackwards(this))) {
            setStart(start - parent.getUnitInc());
            setEnd(end - parent.getUnitInc());
        }
        parent.resizeLine(this);
    }//GEN-LAST:event_DragMe
    
    private void GetInitialCenterPos(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GetInitialCenterPos
         centerLocation = evt.getX();
    }//GEN-LAST:event_GetInitialCenterPos
    
    private void GetInitialRightPos(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GetInitialRightPos
        rightLocation = evt.getX();
    }//GEN-LAST:event_GetInitialRightPos
    
    private void GetInitialLeftPos(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GetInitialLeftPos
        leftLocation = evt.getX();
    }//GEN-LAST:event_GetInitialLeftPos

    private void ResizeMeRight(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ResizeMeRight
       if (evt.getX() > rightLocation + parent.getUnitSize()) {
           if (parent.checkIfCanMoveForwards(this)) {
               setEnd(end + parent.getUnitInc());
               parent.resizeLine(this);
           }
           
       } else if (evt.getX() <  rightLocation - parent.getUnitSize()) {
           if (start < end - (parent.getUnitInc() * 2)) {
               setEnd(end - parent.getUnitInc());
               parent.resizeLine(this);
           }
           
       }
    }//GEN-LAST:event_ResizeMeRight
    
    private void ResizeMeLeft(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ResizeMeLeft
        if (evt.getX() > leftLocation + parent.getUnitSize()) {
            if (start + (parent.getUnitInc() * 2) < end) {
                setStart(start + parent.getUnitInc());
                parent.resizeLine(this);
            }
            
        } else if (evt.getX() < leftLocation - parent.getUnitSize()) {
            if (parent.checkIfCanMoveBackwards(this)) {
                setStart(start - parent.getUnitInc());
                parent.resizeLine(this);
            }
        }
    }//GEN-LAST:event_ResizeMeLeft
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel DisplayPanel;
    public javax.swing.JSpinner EndTimeSpinner;
    private javax.swing.JPanel LeftHandle;
    private javax.swing.JPopupMenu MyMenu;
    private javax.swing.JPanel RightHandle;
    public javax.swing.JSpinner StartTimeSpinner;
    private javax.swing.JMenuItem jMenuItem1;
    // End of variables declaration//GEN-END:variables
    
}
