/*
 * SpecifyTimeZoneDialog.java
 *
 * Created on December 30, 2005, 8:37 AM
 */

package rmischedule.misc;
import java.util.*;
import java.text.*;
import rmischedule.data_connection.*;
/**
 *
 * @author  Ira Juneau
 */
public class SpecifyTimeZoneDialog extends javax.swing.JDialog {
    
    private ArrayList<TimeZone> myTimeZones;
    private ArrayList<String> myStringTimeZones;
    private String detectedTimeZone;
    private TimeZone serverTimeZone;
    private TimeZone clientTimeZone;
    private long actualdifferenceBetweenServerAndLocalTime;
    private long differenceDueToTimeZone;
    private Connection myConnection;
    
    /** Creates new form SpecifyTimeZoneDialog */
    public SpecifyTimeZoneDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        serverTimeZone = connectToServerAndGetTimeZone();
        populateListAndSelectDefault();
        
        updateTimeThread myTimeThread = new updateTimeThread();
        myTimeThread.start();
    }
    
    private TimeZone connectToServerAndGetTimeZone() {
        myConnection = new Connection();
        return myConnection.getServerTimeZone();
    }
    
    /**
     * Gets all available Time Zones eliminates duplicate ones...sorts and 
     * displays to combo box selecting detected one which may or may not be accurate...
     */
    private void populateListAndSelectDefault() {
        String[] myIDs = TimeZone.getAvailableIDs();
        detectedTimeZone = TimeZone.getDefault().getDisplayName();
        myTimeZones = new ArrayList();
        myStringTimeZones = new ArrayList();
        for (int i = 0; i < myIDs.length; i++) {
            if (!myStringTimeZones.contains(TimeZone.getTimeZone(myIDs[i]).getDisplayName()) &&
                 TimeZone.getTimeZone(myIDs[i]).getDisplayName().indexOf("GMT") < 0) {
                myStringTimeZones.add(TimeZone.getTimeZone(myIDs[i]).getDisplayName());
                myTimeZones.add(TimeZone.getTimeZone(myIDs[i]));
            }
        }
        Collections.sort(myTimeZones, new TimeZoneComparator());
        Collections.sort(myStringTimeZones);
        for (int i = 0; i < myTimeZones.size(); i++) {
            TimeZoneCombo.addItem(myTimeZones.get(i).getDisplayName());
            if (myStringTimeZones.get(i).equals(detectedTimeZone)) {
                TimeZoneCombo.setSelectedItem(myTimeZones.get(i).getDisplayName());
                clientTimeZone = myTimeZones.get(i);
            } 
        }
    }
    
    private class TimeZoneComparator implements Comparator<TimeZone> {
        public TimeZoneComparator() {
            
        }
        
        public int compare(TimeZone t1, TimeZone t2) {
            return t1.getDisplayName().compareTo(t2.getDisplayName());
        }
        
        public boolean equals(TimeZone t1) {
            return false;
        }
    }
    
    /**
     * Uses time information gathered from server to continually display what time it should be....
     */
    private class updateTimeThread extends Thread {
        public updateTimeThread() {
            
        }
        
        public void run() {
            while (true) {
                try {
                    sleep(100);
                } catch (Exception e) {}
                long currentTime = System.currentTimeMillis();
                currentTime = currentTime - actualdifferenceBetweenServerAndLocalTime + differenceDueToTimeZone;
                Date myDate = new Date(currentTime);
                DateFormat myFormatter = DateFormat.getTimeInstance(DateFormat.FULL);
                TimeLabel.setText(myFormatter.format(myDate));
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        TimeLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        TimeZoneCombo = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Please Specify Your Time Zone");
        jPanel1.setLayout(new java.awt.GridLayout(2, 0));

        jPanel3.setLayout(new java.awt.GridLayout());

        TimeLabel.setText("jLabel1");
        jPanel3.add(TimeLabel);

        jPanel1.add(jPanel3);

        jPanel4.setLayout(new java.awt.GridLayout());

        TimeZoneCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateClientTimeZone(evt);
            }
        });

        jPanel4.add(TimeZoneCombo);

        jPanel1.add(jPanel4);

        getContentPane().add(jPanel1);

        jPanel2.setMaximumSize(new java.awt.Dimension(32767, 24));
        jPanel2.setMinimumSize(new java.awt.Dimension(10, 24));
        jPanel2.setPreferredSize(new java.awt.Dimension(10, 24));
        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel2.add(jButton1);

        getContentPane().add(jPanel2);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-220)/2, (screenSize.height-113)/2, 220, 113);
    }
    // </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void updateClientTimeZone(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateClientTimeZone
        clientTimeZone = myTimeZones.get(TimeZoneCombo.getSelectedIndex());
        long serverTime = myConnection.getServerTimeMillis();
        actualdifferenceBetweenServerAndLocalTime = System.currentTimeMillis() - serverTime;
        differenceDueToTimeZone = clientTimeZone.getRawOffset() - serverTimeZone.getRawOffset();
    }//GEN-LAST:event_updateClientTimeZone
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SpecifyTimeZoneDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TimeLabel;
    private javax.swing.JComboBox TimeZoneCombo;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables
    
}
