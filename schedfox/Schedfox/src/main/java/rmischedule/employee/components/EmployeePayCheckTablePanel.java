/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Client_Billing.java
 *
 * Created on Mar 15, 2011, 4:19:24 PM
 */
package rmischedule.employee.components;

import java.util.ArrayList;
import javax.swing.JPanel;
import rmischedule.billing.EmployeePaymentDetail;
import rmischedule.billing.EmployeePaymentModel;
import rmischedule.components.graphicalcomponents.GenericEditSubForm;
import rmischedule.data_connection.Connection;
import rmischedule.main.Main_Window;
import schedfoxlib.model.util.Record_Set;
import schedfoxlib.model.ClientBillFrequency;
import schedfoxlib.model.Employee;
import schedfoxlib.model.EmployeePayments;
import schedfoxlib.model.SalesTax;
import rmischeduleserver.mysqlconnectivity.queries.GeneralQueryFormat;
import rmischeduleserver.mysqlconnectivity.queries.billing.get_employee_payments_query;
import rmischeduleserver.mysqlconnectivity.queries.client.billing.get_client_billing_query;
import rmischeduleserver.mysqlconnectivity.queries.employee.employee_state_noncertification_query;

/**
 *
 * @author user
 */
public class EmployeePayCheckTablePanel extends GenericEditSubForm {

    //private Schedule_View_Panel myParent;
    private Connection con;
    private Employee employee;
    private EmployeePaymentModel employeePaymentModel;

    /** Creates new form Client_Billing */
    public EmployeePayCheckTablePanel(Connection con, Employee employee) { //TODO what is my parent from the web
        this.employee = employee;
        this.con = con;
        this.employeePaymentModel = new EmployeePaymentModel(Integer.parseInt(con.myCompany));

        
        initComponents();
        //this.myParent = myParent;
        

    }

    
    private EmployeePaymentModel getEmployeePaymentModel() {
        return this.employeePaymentModel;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainTablePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        paymentTable = new javax.swing.JTable();

        setMinimumSize(new java.awt.Dimension(28, 28));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        mainTablePanel.setLayout(new java.awt.GridLayout());

        paymentTable.setModel(getEmployeePaymentModel());
        paymentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paymentTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(paymentTable);

        mainTablePanel.add(jScrollPane2);

        add(mainTablePanel);
    }// </editor-fold>//GEN-END:initComponents

    private void paymentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentTableMouseClicked
       
        
        if (evt.getClickCount() > 1) {
            int selRow = this.paymentTable.getSelectedRow();
            EmployeePayments payment = this.employeePaymentModel.getPayment(selRow);
            EmployeePaymentDetail detail = new EmployeePaymentDetail(Main_Window.parentOfApplication,
                    true, payment, Integer.parseInt(con.myCompany));
            detail.setVisible(true);
        }
    }//GEN-LAST:event_paymentTableMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel mainTablePanel;
    private javax.swing.JTable paymentTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public GeneralQueryFormat getQuery(boolean isSelected) {
        get_client_billing_query getClientBilling = new get_client_billing_query();
        try {
            getClientBilling.update(this.employee.getEmployeeId());
        } catch (Exception e) {
            e.printStackTrace();
        }
        return getClientBilling;
    }

    @Override
    public GeneralQueryFormat getSaveQuery(boolean isNewData) {
        employee_state_noncertification_query query = new employee_state_noncertification_query();

        return query;
    }

   

    public void loadEmployeePayments() {
        get_employee_payments_query paymentQuery = new get_employee_payments_query();
        try {
            //paymentQuery.setPreparedStatement(new Object[] {((Employee) myparent.getSelectedObject()).getEmployeeId()});
            paymentQuery.setPreparedStatement(new Object[] {this.employee.getEmployeeId()});
        } catch (Exception e) {
            e.printStackTrace();
        }
        employeePaymentModel.clearData();

        Record_Set rst = this.con.executeQuery(paymentQuery);
        ArrayList<EmployeePayments> payments = new ArrayList<EmployeePayments>();
        for (int r = 0; r < rst.length(); r++) {
            payments.add(new EmployeePayments(rst));
            employeePaymentModel.addPayment(payments.get(r));
            rst.moveNext();
        }

        /* Turns blue but ignores the background color
         *
        int vColIndex = 1;
        TableColumn col = paymentTable.getColumnModel().getColumn(vColIndex);
        col.setCellRenderer(new MyTableCellRenderer());
         *
         */
    }

    @Override
    public void loadData(Record_Set rs) {
        
        this.loadEmployeePayments();
        try {
            SalesTax selectedTax = new SalesTax();
            selectedTax.setSalesTaxId(rs.getInt("sales_tax_id"));

            ClientBillFrequency billFrequency = new ClientBillFrequency();
            billFrequency.setClientBillFrequencyId(rs.getInt("client_bill_frequency_id"));

        } catch (Exception e) {
        }
    }

    @Override
    public boolean needsMoreRecordSets() {
        return false;
    }

    @Override
    public String getMyTabTitle() {
        return "Pay Stubs";
    }

    @Override
    public JPanel getMyForm() {
        return this;
    }

    @Override
    public void doOnClear() {
    }

    @Override
    public boolean userHasAccess() {
        return true;
    }
}
