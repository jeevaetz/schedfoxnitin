/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EmployeeClientAssignment.java
 *
 * Created on May 20, 2010, 5:53:45 PM
 */

package rmischedule.employee.components;

import java.awt.BorderLayout;
import java.util.ArrayList;
import javax.swing.JPanel;
import rmischedule.components.List_View;
import rmischedule.components.graphicalcomponents.GenericEditSubForm;
import rmischedule.employee.xEmployeeEdit;
import schedfoxlib.model.util.Record_Set;
import rmischeduleserver.mysqlconnectivity.queries.GeneralQueryFormat;
import rmischeduleserver.mysqlconnectivity.queries.employee.employee_to_client_query;
import rmischeduleserver.mysqlconnectivity.queries.employee.save_employee_to_client_query;

/**
 *
 * @author user
 */
public class EmployeeClientAssignment extends GenericEditSubForm {

    private List_View employeeClientView;
    private xEmployeeEdit parentForm;

    /** Creates new form EmployeeClientAssignment */
    public EmployeeClientAssignment(xEmployeeEdit main) {
        initComponents();
        parentForm = main;

        employeeClientView = new List_View();
        employeeClientView.addColumn("client_id"    , List_View.STRING, false, false);
        employeeClientView.addColumn("Assigned", List_View.BOOLEAN, true, true, 90);
        employeeClientView.addColumn("Store Name", List_View.STRING, false, true, 90);

        employeeClientView.buildTable();
        employeeClientView.maximizeTable();

        add(employeeClientView.myScrollPane, BorderLayout.CENTER);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridLayout());
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public GeneralQueryFormat getQuery(boolean isSelected) {
        employee_to_client_query clientQuery = new employee_to_client_query();
        try {
            clientQuery.update(Integer.parseInt(parentForm.getMyIdForSave()));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return clientQuery;
    }

    @Override
    public GeneralQueryFormat getSaveQuery(boolean isNewData) {
        int rowCount = employeeClientView.getRowCount();
        ArrayList<Integer> clients = new ArrayList<Integer>();
        for (int cv = 0; cv < rowCount; cv++) {
            Boolean selected = (Boolean)employeeClientView.getTrueValueAt(cv, 1);
            if (selected != null && selected) {
                clients.add((Integer)employeeClientView.getTrueValueAt(cv, 0));
            }
        }
        save_employee_to_client_query saveClients = new save_employee_to_client_query();
        try {
            saveClients.update(Integer.parseInt(parentForm.getMyIdForSave()), clients);
        } catch (Exception e) {
            saveClients.update(0, clients);
        }
        return saveClients;
    }

    @Override
    public void loadData(Record_Set rs) {
        employeeClientView.clearRows();
        for (int i = 0; i < rs.length(); i++) {
            Object[] nextRow = new Object[3];
            nextRow[0] = rs.getInt("client_id");
            String isSelected = rs.getString("isselected");
            if (isSelected.equals("t")) {
                nextRow[1] = true;
            } else {
                nextRow[1] = false;
            }
            nextRow[2] = rs.getString("client_name");
            
            employeeClientView.addRow(nextRow);
            rs.moveNext();
        }
        employeeClientView.fireTableDataChanged();
    }

    @Override
    public boolean needsMoreRecordSets() {
        return false;
    }

    @Override
    public String getMyTabTitle() {
        return "Assigned Stores";
    }

    @Override
    public JPanel getMyForm() {
        return this;
    }

    @Override
    public void doOnClear() {
        
    }

    @Override
    public boolean userHasAccess() {
        return true;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
