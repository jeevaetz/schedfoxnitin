/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Client_Billing.java
 *
 * Created on Mar 15, 2011, 4:19:24 PM
 */
package rmischedule.employee.components;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.AbstractTableModel;
import rmischedule.billing.ChooseTaxTypeDialog;
import rmischedule.billing.AddEditDeductionDialog;
import rmischedule.billing.AddEditWagesDialog;
import rmischedule.billing.DeductionModel;
import rmischedule.billing.EditRateCodeDialog;
import rmischedule.billing.EmployeePaymentDetail;
import rmischedule.billing.EmployeePaymentModel;
import rmischedule.billing.RateCodeModel;
import rmischedule.billing.WageModel;
import rmischedule.components.graphicalcomponents.GenericEditSubForm;
import rmischedule.employee.xEmployeeEdit;
import rmischedule.main.Main_Window;
import rmischeduleserver.control.BillingController;
import rmischeduleserver.control.HealthCareController;
import schedfoxlib.model.util.Record_Set;
import schedfoxlib.model.ClientBillFrequency;
import schedfoxlib.model.Employee;
import schedfoxlib.model.EmployeeAccounts;
import schedfoxlib.model.EmployeeDeductions;
import schedfoxlib.model.EmployeePayments;
import schedfoxlib.model.EmployeeRateCode;
import schedfoxlib.model.EmployeeTax;
import schedfoxlib.model.EmployeeWages;
import schedfoxlib.model.SalesTax;
import schedfoxlib.model.TaxTypes;
import rmischeduleserver.mysqlconnectivity.queries.GeneralQueryFormat;
import rmischeduleserver.mysqlconnectivity.queries.RunQueriesEx;
import rmischeduleserver.mysqlconnectivity.queries.billing.get_employee_account_query;
import rmischeduleserver.mysqlconnectivity.queries.billing.get_employee_additional_wages_query;
import rmischeduleserver.mysqlconnectivity.queries.billing.get_employee_deductions_query;
import rmischeduleserver.mysqlconnectivity.queries.billing.get_employee_payments_query;
import rmischeduleserver.mysqlconnectivity.queries.billing.save_employee_account_query;
import rmischeduleserver.mysqlconnectivity.queries.client.billing.get_client_billing_query;
import rmischeduleserver.mysqlconnectivity.queries.employee.save_employee_sub_contractor_query;
import rmischeduleserver.mysqlconnectivity.queries.employee.save_employee_tax_query;
import schedfoxlib.model.EmployeeHealthcare;

/**
 *
 * @author user
 */
public class Employee_Billing extends GenericEditSubForm {

    private xEmployeeEdit myParent;
    private RateCodeModel<EmployeeRateCode> rateCodeModel;
    private EmployeePaymentModel employeePaymentModel;
    private DeductionModel employeeDeductionModel;
    private WageModel employeeWageModel;
    private EmployeeHealthcarePanel employeeHealthCare;
    private HealthCareHistory healthCareModel = new HealthCareHistory();
    
    /**
     * Creates new form Client_Billing
     */
    public Employee_Billing(xEmployeeEdit myParent) {
        this.rateCodeModel = new RateCodeModel<EmployeeRateCode>(Integer.parseInt(myParent.getConnection().myCompany));
        this.employeeWageModel = new WageModel(Integer.parseInt(myParent.getConnection().myCompany));
        this.employeePaymentModel = new EmployeePaymentModel(Integer.parseInt(myParent.getConnection().myCompany));
        this.employeeDeductionModel = new DeductionModel(Integer.parseInt(myParent.getConnection().myCompany));
        initComponents();
        
        employeeHealthCare = new EmployeeHealthcarePanel(myParent.getConnection().myCompany);
        healthCarePanel.add(employeeHealthCare);
        
        this.myParent = myParent;
    }

    private RateCodeModel getRateCodeModel() {
        return this.rateCodeModel;
    }

    private DeductionModel getDeductionModel() {
        return this.employeeDeductionModel;
    }

    private WageModel getWageModel() {
        return this.employeeWageModel;
    }

    private EmployeePaymentModel getEmployeePaymentModel() {
        return this.employeePaymentModel;
    }

    private void toggleDirectDeposit(boolean isSelected) {
        this.accountTypeCombo.setEnabled(isSelected);
        this.routingText.setEnabled(isSelected);
        this.accountText.setEnabled(isSelected);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        stateId = new javax.swing.JTextField();
        cityId = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        paymentsPanel = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        subContractorChk = new javax.swing.JCheckBox();
        depositPanel = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        allowDirectDeposit = new javax.swing.JCheckBox();
        jPanel11 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        accountTypeCombo = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        routingText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        accountText = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        paymentTable = new javax.swing.JTable();
        rateCodePanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        wageTable = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        deleteWageBtn = new javax.swing.JButton();
        addWageBtn = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        deductionTable = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        deleteDeductionBtn = new javax.swing.JButton();
        addDeductionBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rateCodeTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        deleteRateBtn = new javax.swing.JButton();
        rateCodeBtn = new javax.swing.JButton();
        taxPanel = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        federalStatusTxt = new javax.swing.JTextField();
        jPanel21 = new javax.swing.JPanel();
        federalExemptionTxt = new javax.swing.JTextField();
        jPanel24 = new javax.swing.JPanel();
        federalWIthholdingTxt = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        stateCodeTxt = new javax.swing.JTextField();
        stateBtn = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        stateStatusTxt = new javax.swing.JTextField();
        jPanel22 = new javax.swing.JPanel();
        stateExemptionTxt = new javax.swing.JTextField();
        jPanel25 = new javax.swing.JPanel();
        stateWithholdingTxt = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        cityCodeTxt = new javax.swing.JTextField();
        cityBtn = new javax.swing.JButton();
        jPanel19 = new javax.swing.JPanel();
        cityStatusTxt = new javax.swing.JTextField();
        jPanel23 = new javax.swing.JPanel();
        cityExemptionTxt = new javax.swing.JTextField();
        jPanel26 = new javax.swing.JPanel();
        cityWithholdingTxt = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        healthCareParentPanel = new javax.swing.JPanel();
        healthCarePanel = new javax.swing.JPanel();
        healthCareTablePanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        healthCareTable = new javax.swing.JTable();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        paymentsPanel.setLayout(new javax.swing.BoxLayout(paymentsPanel, javax.swing.BoxLayout.Y_AXIS));

        jPanel27.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));
        jPanel27.setMaximumSize(new java.awt.Dimension(32767, 32));
        jPanel27.setMinimumSize(new java.awt.Dimension(10, 32));
        jPanel27.setPreferredSize(new java.awt.Dimension(100, 32));
        jPanel27.setLayout(new javax.swing.BoxLayout(jPanel27, javax.swing.BoxLayout.LINE_AXIS));

        subContractorChk.setText("Employee is a sub contractor");
        jPanel27.add(subContractorChk);

        paymentsPanel.add(jPanel27);

        depositPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Direct Deposit"));
        depositPanel.setMaximumSize(new java.awt.Dimension(32767, 130));
        depositPanel.setMinimumSize(new java.awt.Dimension(10, 120));
        depositPanel.setPreferredSize(new java.awt.Dimension(100, 120));
        depositPanel.setLayout(new javax.swing.BoxLayout(depositPanel, javax.swing.BoxLayout.Y_AXIS));

        jPanel8.setMaximumSize(new java.awt.Dimension(50000, 30));
        jPanel8.setMinimumSize(new java.awt.Dimension(50, 20));
        jPanel8.setPreferredSize(new java.awt.Dimension(500, 20));
        jPanel8.setLayout(new javax.swing.BoxLayout(jPanel8, javax.swing.BoxLayout.LINE_AXIS));

        allowDirectDeposit.setText("Allow Direct Deposit");
        allowDirectDeposit.setMaximumSize(new java.awt.Dimension(145, 18));
        allowDirectDeposit.setMinimumSize(new java.awt.Dimension(145, 18));
        allowDirectDeposit.setPreferredSize(new java.awt.Dimension(145, 18));
        allowDirectDeposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allowDirectDepositActionPerformed(evt);
            }
        });
        jPanel8.add(allowDirectDeposit);

        depositPanel.add(jPanel8);

        jPanel11.setMaximumSize(new java.awt.Dimension(50000, 30));
        jPanel11.setMinimumSize(new java.awt.Dimension(50, 20));
        jPanel11.setPreferredSize(new java.awt.Dimension(500, 20));
        jPanel11.setLayout(new javax.swing.BoxLayout(jPanel11, javax.swing.BoxLayout.LINE_AXIS));

        jLabel1.setText("Account Type");
        jLabel1.setMaximumSize(new java.awt.Dimension(100, 16));
        jLabel1.setMinimumSize(new java.awt.Dimension(100, 16));
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel11.add(jLabel1);

        accountTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Checking", "Savings" }));
        accountTypeCombo.setEnabled(false);
        jPanel11.add(accountTypeCombo);

        depositPanel.add(jPanel11);

        jPanel4.setMaximumSize(new java.awt.Dimension(50000, 30));
        jPanel4.setMinimumSize(new java.awt.Dimension(50, 20));
        jPanel4.setPreferredSize(new java.awt.Dimension(500, 20));
        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.X_AXIS));

        jLabel2.setText("Routing Number");
        jLabel2.setMaximumSize(new java.awt.Dimension(100, 16));
        jLabel2.setMinimumSize(new java.awt.Dimension(100, 16));
        jLabel2.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel4.add(jLabel2);

        routingText.setEnabled(false);
        jPanel4.add(routingText);

        jLabel3.setText("Account Number");
        jLabel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 8, 0, 2));
        jLabel3.setMaximumSize(new java.awt.Dimension(110, 16));
        jLabel3.setMinimumSize(new java.awt.Dimension(110, 16));
        jLabel3.setPreferredSize(new java.awt.Dimension(110, 16));
        jPanel4.add(jLabel3);

        accountText.setEnabled(false);
        jPanel4.add(accountText);

        depositPanel.add(jPanel4);

        paymentsPanel.add(depositPanel);

        paymentTable.setModel(getEmployeePaymentModel());
        paymentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paymentTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(paymentTable);

        paymentsPanel.add(jScrollPane2);

        jTabbedPane1.addTab("Employee PayChecks", paymentsPanel);

        rateCodePanel.setLayout(new java.awt.GridLayout(2, 0));

        jPanel1.setLayout(new java.awt.GridLayout(1, 2));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Addon Wages"));
        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.Y_AXIS));

        wageTable.setModel(getWageModel());
        wageTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wageTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(wageTable);

        jPanel5.add(jScrollPane3);

        jPanel10.setMaximumSize(new java.awt.Dimension(32767, 30));
        jPanel10.setMinimumSize(new java.awt.Dimension(10, 30));
        jPanel10.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        deleteWageBtn.setText("Delete Wage");
        deleteWageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteWageBtnActionPerformed(evt);
            }
        });
        jPanel10.add(deleteWageBtn);

        addWageBtn.setText("Add Wage");
        addWageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addWageBtnActionPerformed(evt);
            }
        });
        jPanel10.add(addWageBtn);

        jPanel5.add(jPanel10);

        jPanel1.add(jPanel5);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Deductions"));
        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.Y_AXIS));

        deductionTable.setModel(getDeductionModel());
        deductionTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deductionTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(deductionTable);

        jPanel6.add(jScrollPane4);

        jPanel9.setMaximumSize(new java.awt.Dimension(32767, 30));
        jPanel9.setMinimumSize(new java.awt.Dimension(10, 30));
        jPanel9.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        deleteDeductionBtn.setText("Delete Deduction");
        deleteDeductionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDeductionBtnActionPerformed(evt);
            }
        });
        jPanel9.add(deleteDeductionBtn);

        addDeductionBtn.setText("Add Deduction");
        addDeductionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDeductionBtnActionPerformed(evt);
            }
        });
        jPanel9.add(addDeductionBtn);

        jPanel6.add(jPanel9);

        jPanel1.add(jPanel6);

        rateCodePanel.add(jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Rate Codes"));
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

        rateCodeTable.setModel(getRateCodeModel());
        rateCodeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rateCodeTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(rateCodeTable);

        jPanel2.add(jScrollPane1);

        jPanel3.setMaximumSize(new java.awt.Dimension(32767, 30));
        jPanel3.setMinimumSize(new java.awt.Dimension(10, 30));
        jPanel3.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        deleteRateBtn.setText("Delete Payrate");
        deleteRateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRateBtnActionPerformed(evt);
            }
        });
        jPanel3.add(deleteRateBtn);

        rateCodeBtn.setText("Add Payrate");
        rateCodeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rateCodeBtnActionPerformed(evt);
            }
        });
        jPanel3.add(rateCodeBtn);

        jPanel2.add(jPanel3);

        rateCodePanel.add(jPanel2);

        jTabbedPane1.addTab("Employee Payroll", rateCodePanel);

        taxPanel.setLayout(new javax.swing.BoxLayout(taxPanel, javax.swing.BoxLayout.Y_AXIS));

        jPanel15.setMaximumSize(new java.awt.Dimension(32767, 30));
        jPanel15.setMinimumSize(new java.awt.Dimension(10, 30));
        jPanel15.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel15.setLayout(new javax.swing.BoxLayout(jPanel15, javax.swing.BoxLayout.LINE_AXIS));

        jLabel7.setText("Type");
        jLabel7.setMaximumSize(new java.awt.Dimension(80, 16));
        jLabel7.setMinimumSize(new java.awt.Dimension(80, 16));
        jLabel7.setPreferredSize(new java.awt.Dimension(80, 16));
        jPanel15.add(jLabel7);

        jLabel8.setText("Code");
        jLabel8.setMaximumSize(new java.awt.Dimension(120, 16));
        jPanel15.add(jLabel8);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Status");
        jLabel10.setMaximumSize(new java.awt.Dimension(80, 16));
        jPanel15.add(jLabel10);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Exemptions");
        jLabel11.setMaximumSize(new java.awt.Dimension(80, 16));
        jPanel15.add(jLabel11);

        jLabel12.setText("Withholdings");
        jLabel12.setMaximumSize(new java.awt.Dimension(80, 16));
        jPanel15.add(jLabel12);

        taxPanel.add(jPanel15);

        jPanel7.setMaximumSize(new java.awt.Dimension(32767, 30));
        jPanel7.setMinimumSize(new java.awt.Dimension(10, 30));
        jPanel7.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7, javax.swing.BoxLayout.LINE_AXIS));

        jLabel4.setText("Federal");
        jLabel4.setMaximumSize(new java.awt.Dimension(80, 16));
        jLabel4.setMinimumSize(new java.awt.Dimension(80, 16));
        jLabel4.setPreferredSize(new java.awt.Dimension(80, 16));
        jPanel7.add(jLabel4);

        jLabel9.setMaximumSize(new java.awt.Dimension(120, 16));
        jPanel7.add(jLabel9);

        jPanel20.setMaximumSize(new java.awt.Dimension(80, 40));
        jPanel20.setMinimumSize(new java.awt.Dimension(80, 16));
        jPanel20.setPreferredSize(new java.awt.Dimension(80, 40));
        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        federalStatusTxt.setMaximumSize(new java.awt.Dimension(30, 2147483647));
        federalStatusTxt.setPreferredSize(new java.awt.Dimension(30, 28));
        jPanel20.add(federalStatusTxt);

        jPanel7.add(jPanel20);

        jPanel21.setMaximumSize(new java.awt.Dimension(80, 40));
        jPanel21.setMinimumSize(new java.awt.Dimension(80, 16));
        jPanel21.setPreferredSize(new java.awt.Dimension(80, 40));
        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        federalExemptionTxt.setMaximumSize(new java.awt.Dimension(30, 2147483647));
        federalExemptionTxt.setPreferredSize(new java.awt.Dimension(30, 28));
        jPanel21.add(federalExemptionTxt);

        jPanel7.add(jPanel21);

        jPanel24.setMaximumSize(new java.awt.Dimension(80, 40));
        jPanel24.setMinimumSize(new java.awt.Dimension(80, 16));
        jPanel24.setPreferredSize(new java.awt.Dimension(80, 40));
        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        federalWIthholdingTxt.setPreferredSize(new java.awt.Dimension(80, 28));
        jPanel24.add(federalWIthholdingTxt);

        jPanel7.add(jPanel24);

        taxPanel.add(jPanel7);

        jPanel12.setMaximumSize(new java.awt.Dimension(32767, 30));
        jPanel12.setMinimumSize(new java.awt.Dimension(10, 30));
        jPanel12.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel12.setLayout(new javax.swing.BoxLayout(jPanel12, javax.swing.BoxLayout.LINE_AXIS));

        jLabel5.setText("State");
        jLabel5.setMaximumSize(new java.awt.Dimension(80, 16));
        jLabel5.setMinimumSize(new java.awt.Dimension(80, 16));
        jLabel5.setPreferredSize(new java.awt.Dimension(80, 16));
        jPanel12.add(jLabel5);

        jPanel16.setMaximumSize(new java.awt.Dimension(120, 40));
        jPanel16.setMinimumSize(new java.awt.Dimension(120, 16));
        jPanel16.setPreferredSize(new java.awt.Dimension(120, 40));
        jPanel16.setLayout(new javax.swing.BoxLayout(jPanel16, javax.swing.BoxLayout.LINE_AXIS));

        stateCodeTxt.setEnabled(false);
        stateCodeTxt.setPreferredSize(new java.awt.Dimension(120, 28));
        jPanel16.add(stateCodeTxt);

        stateBtn.setText("...");
        stateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stateBtnActionPerformed(evt);
            }
        });
        jPanel16.add(stateBtn);

        jPanel12.add(jPanel16);

        jPanel18.setMaximumSize(new java.awt.Dimension(80, 40));
        jPanel18.setMinimumSize(new java.awt.Dimension(80, 16));
        jPanel18.setPreferredSize(new java.awt.Dimension(80, 40));
        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        stateStatusTxt.setMaximumSize(new java.awt.Dimension(30, 2147483647));
        stateStatusTxt.setPreferredSize(new java.awt.Dimension(30, 28));
        jPanel18.add(stateStatusTxt);

        jPanel12.add(jPanel18);

        jPanel22.setMaximumSize(new java.awt.Dimension(80, 40));
        jPanel22.setMinimumSize(new java.awt.Dimension(80, 16));
        jPanel22.setPreferredSize(new java.awt.Dimension(80, 40));
        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        stateExemptionTxt.setMaximumSize(new java.awt.Dimension(30, 2147483647));
        stateExemptionTxt.setPreferredSize(new java.awt.Dimension(30, 28));
        jPanel22.add(stateExemptionTxt);

        jPanel12.add(jPanel22);

        jPanel25.setMaximumSize(new java.awt.Dimension(80, 40));
        jPanel25.setMinimumSize(new java.awt.Dimension(80, 16));
        jPanel25.setPreferredSize(new java.awt.Dimension(80, 40));
        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        stateWithholdingTxt.setPreferredSize(new java.awt.Dimension(80, 28));
        jPanel25.add(stateWithholdingTxt);

        jPanel12.add(jPanel25);

        taxPanel.add(jPanel12);

        jPanel13.setMaximumSize(new java.awt.Dimension(32767, 30));
        jPanel13.setMinimumSize(new java.awt.Dimension(10, 30));
        jPanel13.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel13.setLayout(new javax.swing.BoxLayout(jPanel13, javax.swing.BoxLayout.LINE_AXIS));

        jLabel6.setText("City");
        jLabel6.setMaximumSize(new java.awt.Dimension(80, 16));
        jLabel6.setMinimumSize(new java.awt.Dimension(80, 16));
        jLabel6.setPreferredSize(new java.awt.Dimension(80, 16));
        jPanel13.add(jLabel6);

        jPanel17.setMaximumSize(new java.awt.Dimension(120, 40));
        jPanel17.setMinimumSize(new java.awt.Dimension(120, 16));
        jPanel17.setPreferredSize(new java.awt.Dimension(120, 40));
        jPanel17.setLayout(new javax.swing.BoxLayout(jPanel17, javax.swing.BoxLayout.LINE_AXIS));

        cityCodeTxt.setEnabled(false);
        cityCodeTxt.setPreferredSize(new java.awt.Dimension(120, 28));
        jPanel17.add(cityCodeTxt);

        cityBtn.setText("...");
        cityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityBtnActionPerformed(evt);
            }
        });
        jPanel17.add(cityBtn);

        jPanel13.add(jPanel17);

        jPanel19.setMaximumSize(new java.awt.Dimension(80, 40));
        jPanel19.setMinimumSize(new java.awt.Dimension(80, 16));
        jPanel19.setPreferredSize(new java.awt.Dimension(80, 40));
        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        cityStatusTxt.setMaximumSize(new java.awt.Dimension(30, 2147483647));
        cityStatusTxt.setPreferredSize(new java.awt.Dimension(30, 28));
        jPanel19.add(cityStatusTxt);

        jPanel13.add(jPanel19);

        jPanel23.setMaximumSize(new java.awt.Dimension(80, 40));
        jPanel23.setMinimumSize(new java.awt.Dimension(80, 16));
        jPanel23.setPreferredSize(new java.awt.Dimension(80, 40));
        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        cityExemptionTxt.setMaximumSize(new java.awt.Dimension(30, 2147483647));
        cityExemptionTxt.setPreferredSize(new java.awt.Dimension(30, 28));
        jPanel23.add(cityExemptionTxt);

        jPanel13.add(jPanel23);

        jPanel26.setMaximumSize(new java.awt.Dimension(80, 40));
        jPanel26.setMinimumSize(new java.awt.Dimension(80, 16));
        jPanel26.setPreferredSize(new java.awt.Dimension(80, 40));
        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        cityWithholdingTxt.setPreferredSize(new java.awt.Dimension(80, 28));
        jPanel26.add(cityWithholdingTxt);

        jPanel13.add(jPanel26);

        taxPanel.add(jPanel13);
        taxPanel.add(jPanel14);

        jTabbedPane1.addTab("Tax Info", taxPanel);

        healthCareParentPanel.setLayout(new java.awt.GridLayout(2, 0));

        healthCarePanel.setLayout(new java.awt.GridLayout(2, 0));
        healthCareParentPanel.add(healthCarePanel);

        healthCareTablePanel.setLayout(new java.awt.GridLayout(1, 0));

        healthCareTable.setModel(healthCareModel);
        jScrollPane5.setViewportView(healthCareTable);

        healthCareTablePanel.add(jScrollPane5);

        healthCareParentPanel.add(healthCareTablePanel);

        jTabbedPane1.addTab("HealthCare Options", healthCareParentPanel);

        add(jTabbedPane1);
    }// </editor-fold>//GEN-END:initComponents

    private void rateCodeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rateCodeBtnActionPerformed
        Employee selectedEmployee = (Employee) myParent.getSelectedObject();
        EditRateCodeDialog<EmployeeRateCode> editRateCode = new EditRateCodeDialog<EmployeeRateCode>(Main_Window.parentOfApplication,
                true, myparent.getConnection().myCompany, selectedEmployee.getEmployeeId(), new EmployeeRateCode());
        editRateCode.setVisible(true);
        EmployeeRateCode myCode = editRateCode.getRateCode();
        myCode.setEmployeeId(selectedEmployee.getEmployeeId());
        BillingController billingController = BillingController.getInstance(myParent.getConnection().myCompany);
        try {
            billingController.saveEmployeeRateCode(myCode);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(Main_Window.parentOfApplication,
                    "Could not save rate code!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        super.reloadData();
    }//GEN-LAST:event_rateCodeBtnActionPerformed

    private void rateCodeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rateCodeTableMouseClicked
        if (evt.getClickCount() > 1) {
            Employee selectedEmployee = (Employee) myParent.getSelectedObject();
            EditRateCodeDialog<EmployeeRateCode> editRateCode = new EditRateCodeDialog<EmployeeRateCode>(Main_Window.parentOfApplication,
                    true, myparent.getConnection().myCompany, selectedEmployee.getEmployeeId(), new EmployeeRateCode());
            editRateCode.loadDataForRateCode(rateCodeModel.getClientRateCode(rateCodeTable.getSelectedRow()));
            editRateCode.setVisible(true);
            try {
                EmployeeRateCode myCode = editRateCode.getRateCode();
                myCode.setEmployeeId(selectedEmployee.getEmployeeId());
                BillingController billingController = BillingController.getInstance(myParent.getConnection().myCompany);
                try {
                    billingController.saveEmployeeRateCode(myCode);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(Main_Window.parentOfApplication,
                            "Could not save rate code!", "Error", JOptionPane.ERROR_MESSAGE);
                }
                super.reloadData();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_rateCodeTableMouseClicked

    private void deleteRateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRateBtnActionPerformed
        try {
            EmployeeRateCode rateCode = (EmployeeRateCode) rateCodeModel.getClientRateCode(rateCodeTable.getSelectedRow());
            int response = JOptionPane.showConfirmDialog(Main_Window.parentOfApplication,
                    "Do you want to remove the selected rate code?", "Confirm Delete",
                    JOptionPane.YES_NO_OPTION);
            if (response == JOptionPane.YES_OPTION) {
                BillingController billingController =
                        BillingController.getInstance(myparent.getConnection().myCompany);
                billingController.deleteEmployeeRateCode(rateCode);
                super.reloadData();
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_deleteRateBtnActionPerformed

    private void paymentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentTableMouseClicked
        if (evt.getClickCount() > 1) {
            int selRow = this.paymentTable.getSelectedRow();
            EmployeePayments payment = this.employeePaymentModel.getPayment(selRow);
            EmployeePaymentDetail detail = new EmployeePaymentDetail(Main_Window.parentOfApplication,
                    true, payment, Integer.parseInt(myParent.getConnection().myCompany));
            detail.setVisible(true);
        }
    }//GEN-LAST:event_paymentTableMouseClicked

    private void deleteDeductionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDeductionBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteDeductionBtnActionPerformed

    private void addDeductionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDeductionBtnActionPerformed
        AddEditDeductionDialog addDeduction = new AddEditDeductionDialog(Main_Window.parentOfApplication,
                true, new EmployeeDeductions(), this, myParent.getConnection().myCompany);
        addDeduction.setVisible(true);
    }//GEN-LAST:event_addDeductionBtnActionPerformed

    private void deleteWageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteWageBtnActionPerformed
        try {
            EmployeeWages selectedWage = employeeWageModel.getEmployeeWage(wageTable.getSelectedRow());
            int response = JOptionPane.showConfirmDialog(Main_Window.parentOfApplication,
                    "Do you want to remove the selected additional wage?", "Confirm Delete",
                    JOptionPane.YES_NO_OPTION);
            if (response == JOptionPane.YES_OPTION) {
//                BillingController billingController =
//                        BillingController.getInstance(myparent.getConnection().myCompany);
//                billingController.deleteEmployeeRateCode(rateCode);
                super.reloadData();
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_deleteWageBtnActionPerformed

    private void addWageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addWageBtnActionPerformed
        AddEditWagesDialog addWages = new AddEditWagesDialog(Main_Window.parentOfApplication,
                true, new EmployeeWages(), this, myParent.getConnection().myCompany);
        addWages.setVisible(true);
    }//GEN-LAST:event_addWageBtnActionPerformed

    private void allowDirectDepositActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allowDirectDepositActionPerformed
        toggleDirectDeposit(allowDirectDeposit.isSelected());
    }//GEN-LAST:event_allowDirectDepositActionPerformed

    private void wageTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wageTableMouseClicked
        if (evt.getClickCount() > 1) {
            EmployeeWages selectedWage = employeeWageModel.getEmployeeWage(wageTable.getSelectedRow());
            AddEditWagesDialog editWages = new AddEditWagesDialog(Main_Window.parentOfApplication,
                    true, selectedWage, this, myParent.getConnection().myCompany);
            editWages.setVisible(true);
        }
    }//GEN-LAST:event_wageTableMouseClicked

    private void deductionTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deductionTableMouseClicked
        if (evt.getClickCount() > 1) {
            EmployeeDeductions selectedDeduction = employeeDeductionModel.getEmployeeDeduction(deductionTable.getSelectedRow());
            AddEditDeductionDialog editWages = new AddEditDeductionDialog(Main_Window.parentOfApplication,
                    true, selectedDeduction, this, myParent.getConnection().myCompany);
            editWages.setVisible(true);
        }
    }//GEN-LAST:event_deductionTableMouseClicked

    private void stateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stateBtnActionPerformed
        ChooseTaxTypeDialog addChooseTax = new ChooseTaxTypeDialog(Main_Window.parentOfApplication, true);
        BillingController billingController =
                BillingController.getInstance(myparent.getConnection().myCompany);
        ArrayList<TaxTypes> taxTypes = new ArrayList<TaxTypes>();
        try {
            taxTypes = billingController.getTaxTypesByRegion("State");
        } catch (Exception e) {
        }
        addChooseTax.setTaxTypes(taxTypes);
        addChooseTax.setVisible(true);
        if (addChooseTax.getSelectedTaxTypes() != null) {
            stateCodeTxt.setText(addChooseTax.getSelectedTaxTypes().getTaxName());
            stateId.setText(addChooseTax.getSelectedTaxTypes().getTaxTypeId().toString());
        }

    }//GEN-LAST:event_stateBtnActionPerformed

    private void cityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityBtnActionPerformed
        ChooseTaxTypeDialog addChooseTax = new ChooseTaxTypeDialog(Main_Window.parentOfApplication, true);
        BillingController billingController =
                BillingController.getInstance(myparent.getConnection().myCompany);
        ArrayList<TaxTypes> taxTypes = new ArrayList<TaxTypes>();
        try {
            taxTypes = billingController.getTaxTypesByRegion("City");
        } catch (Exception e) {
        }
        addChooseTax.setTaxTypes(taxTypes);
        addChooseTax.setVisible(true);
        if (addChooseTax.getSelectedTaxTypes() != null) {
            cityCodeTxt.setText(addChooseTax.getSelectedTaxTypes().getTaxName());
            cityId.setText(addChooseTax.getSelectedTaxTypes().getTaxTypeId().toString());
        }
    }//GEN-LAST:event_cityBtnActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField accountText;
    private javax.swing.JComboBox accountTypeCombo;
    private javax.swing.JButton addDeductionBtn;
    private javax.swing.JButton addWageBtn;
    private javax.swing.JCheckBox allowDirectDeposit;
    private javax.swing.JButton cityBtn;
    private javax.swing.JTextField cityCodeTxt;
    private javax.swing.JTextField cityExemptionTxt;
    private javax.swing.JTextField cityId;
    private javax.swing.JTextField cityStatusTxt;
    private javax.swing.JTextField cityWithholdingTxt;
    private javax.swing.JTable deductionTable;
    private javax.swing.JButton deleteDeductionBtn;
    private javax.swing.JButton deleteRateBtn;
    private javax.swing.JButton deleteWageBtn;
    private javax.swing.JPanel depositPanel;
    private javax.swing.JTextField federalExemptionTxt;
    private javax.swing.JTextField federalStatusTxt;
    private javax.swing.JTextField federalWIthholdingTxt;
    private javax.swing.JPanel healthCarePanel;
    private javax.swing.JPanel healthCareParentPanel;
    private javax.swing.JTable healthCareTable;
    private javax.swing.JPanel healthCareTablePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable paymentTable;
    private javax.swing.JPanel paymentsPanel;
    private javax.swing.JButton rateCodeBtn;
    private javax.swing.JPanel rateCodePanel;
    private javax.swing.JTable rateCodeTable;
    private javax.swing.JTextField routingText;
    private javax.swing.JButton stateBtn;
    private javax.swing.JTextField stateCodeTxt;
    private javax.swing.JTextField stateExemptionTxt;
    private javax.swing.JTextField stateId;
    private javax.swing.JTextField stateStatusTxt;
    private javax.swing.JTextField stateWithholdingTxt;
    private javax.swing.JCheckBox subContractorChk;
    private javax.swing.JPanel taxPanel;
    private javax.swing.JTable wageTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public GeneralQueryFormat getQuery(boolean isSelected) {
        get_client_billing_query getClientBilling = new get_client_billing_query();
        try {
            getClientBilling.update(((Employee) myparent.getSelectedObject()).getEmployeeId());
        } catch (Exception e) {
            e.printStackTrace();
        }
        return getClientBilling;
    }

    @Override
    public GeneralQueryFormat getSaveQuery(boolean isNewData) {
        this.saveTaxInformation();
        this.employeeHealthCare.saveData();
        RunQueriesEx runQueryEx = new RunQueriesEx();
        Employee currEmp = (Employee) myParent.getSelectedObject();
        
        save_employee_account_query query = new save_employee_account_query();
        EmployeeAccounts account = new EmployeeAccounts();
        account.setAccountNumber(accountText.getText());
        account.setAccountType(accountTypeCombo.getSelectedIndex());
        account.setRoutingNumber(routingText.getText());
        try {
            account.setEmployeeId(((Employee) myparent.getSelectedObject()).getEmployeeId());
        } catch (Exception e) {
            account.setEmployeeId(0);
        }
        account.setAllowDirectDeposit(allowDirectDeposit.isSelected());
        query.update(account);
        
        save_employee_sub_contractor_query saveSubContractorQuery = new save_employee_sub_contractor_query();
        saveSubContractorQuery.update(subContractorChk.isSelected(), currEmp.getEmployeeId());
        
        runQueryEx.add(query);
        runQueryEx.add(saveSubContractorQuery);
        
        return runQueryEx;
    }

    private void saveTaxInformation() {
        Employee currEmp = (Employee) myParent.getSelectedObject();
        save_employee_tax_query saveEmployeeQuery = new save_employee_tax_query();
        int federalExemptions = 0;
        try {
            federalExemptions = Integer.parseInt(federalExemptionTxt.getText());
        } catch (Exception e) {
        }
        double federalWithholding = 0.0;
        try {
            federalWithholding = Double.parseDouble(federalWIthholdingTxt.getText());
        } catch (Exception e) {
        }

        int stateid = -1;
        try {
            stateid = Integer.parseInt(stateId.getText());
        } catch (Exception e) {
        }
        int stateExemptions = 0;
        try {
            stateExemptions = Integer.parseInt(stateExemptionTxt.getText());
        } catch (Exception e) {
        }
        double stateWithholding = 0.0;
        try {
            stateWithholding = Double.parseDouble(stateWithholdingTxt.getText());
        } catch (Exception e) {
        }

        int cityid = -1;
        try {
            cityid = Integer.parseInt(cityId.getText());
        } catch (Exception e) {
        }
        int cityExemptions = 0;
        try {
            cityExemptions = Integer.parseInt(cityExemptionTxt.getText());
        } catch (Exception e) {
        }
        double cityWithholding = 0.0;
        try {
            cityWithholding = Double.parseDouble(cityWithholdingTxt.getText());
        } catch (Exception e) {
        }

        saveEmployeeQuery.setPreparedStatement(new Object[]{currEmp.getEmployeeId(),
                    0, federalStatusTxt.getText(), federalExemptions, federalWithholding, currEmp.getEmployeeId(),
                    stateid, stateStatusTxt.getText(), stateExemptions, stateWithholding, currEmp.getEmployeeId(),
                    cityid, cityStatusTxt.getText(), cityExemptions, cityWithholding, currEmp.getEmployeeId()
                });
        myparent.getConnection().executeUpdate(saveEmployeeQuery);
    }

    /**
     * Loads the employee rate code.
     */
    private void loadEmployeeRateCode() {
        try {
            Employee selectedEmployee = (Employee) myParent.getSelectedObject();
            BillingController billingController =
                    BillingController.getInstance(myparent.getConnection().myCompany);
            ArrayList<EmployeeRateCode> employeeRateCodes =
                    billingController.getEmployeeRateCodes(selectedEmployee.getEmployeeId());
            rateCodeModel.clearData();
            for (int cr = 0; cr < employeeRateCodes.size(); cr++) {
                this.rateCodeModel.addRateCode(employeeRateCodes.get(cr));
            }
        } catch (Exception e) {
        }
    }

    private void loadEmployeeDeductions() {
        get_employee_deductions_query deductionQuery = new get_employee_deductions_query();
        try {
            deductionQuery.setPreparedStatement(new Object[]{((Employee) myparent.getSelectedObject()).getEmployeeId()});
        } catch (Exception e) {
        }
        employeeDeductionModel.clearData();
        Record_Set rst = myparent.getConnection().executeQuery(deductionQuery);
        ArrayList<EmployeeDeductions> deductions = new ArrayList<EmployeeDeductions>();
        for (int r = 0; r < rst.length(); r++) {
            deductions.add(new EmployeeDeductions(rst));
            employeeDeductionModel.addDeduction(deductions.get(r));
            rst.moveNext();
        }
    }

    private void loadEmployeeWages() {
        get_employee_additional_wages_query wageQuery = new get_employee_additional_wages_query();
        try {
            wageQuery.setPreparedStatement(new Object[]{((Employee) myparent.getSelectedObject()).getEmployeeId()});
        } catch (Exception e) {
        }
        employeeWageModel.clearData();
        Record_Set rst = myparent.getConnection().executeQuery(wageQuery);
        ArrayList<EmployeeWages> wages = new ArrayList<EmployeeWages>();
        for (int r = 0; r < rst.length(); r++) {
            wages.add(new EmployeeWages(rst));
            employeeWageModel.addWage(wages.get(r));
            rst.moveNext();
        }
    }

    private void loadEmployeePayments() {
        get_employee_payments_query paymentQuery = new get_employee_payments_query();
        try {
            paymentQuery.setPreparedStatement(new Object[]{((Employee) myparent.getSelectedObject()).getEmployeeId()});
        } catch (Exception e) {
            e.printStackTrace();
        }
        employeePaymentModel.clearData();
        Record_Set rst = myparent.getConnection().executeQuery(paymentQuery);
        ArrayList<EmployeePayments> payments = new ArrayList<EmployeePayments>();
        for (int r = 0; r < rst.length(); r++) {
            payments.add(new EmployeePayments(rst));
            employeePaymentModel.addPayment(payments.get(r));
            rst.moveNext();
        }
    }

    private void loadEmployeeAccount() {
        get_employee_account_query getAccountQuery = new get_employee_account_query();
        try {
            getAccountQuery.setPreparedStatement(new Object[]{((Employee) myparent.getSelectedObject()).getEmployeeId()});
        } catch (Exception e) {
            e.printStackTrace();
        }
        Record_Set rst = myparent.getConnection().executeQuery(getAccountQuery);
        for (int r = 0; r < rst.length(); r++) {
            EmployeeAccounts account = new EmployeeAccounts(rst);
            routingText.setText(account.getRoutingNumber());
            accountText.setText(account.getAccountNumber());
            allowDirectDeposit.setSelected(account.getAllowDirectDeposit());
            this.toggleDirectDeposit(account.getAllowDirectDeposit());
            accountTypeCombo.setSelectedIndex(account.getAccountType());
        }
    }

    private void loadTaxInfo() {
        Employee selectedEmployee = (Employee) myParent.getSelectedObject();
        BillingController controller = BillingController.getInstance(myParent.getConnection().myCompany);
        ArrayList<EmployeeTax> taxes = controller.getEmployeeTax(selectedEmployee.getEmployeeId());
        for (int t = 0; t < taxes.size(); t++) {
            try {
                if (taxes.get(t).getTaxTypeObj().getTaxRegion().getRegion().equals("Federal")) {
                    loadFederalTaxInfo(taxes.get(t));
                } else if (taxes.get(t).getTaxTypeObj().getTaxRegion().getRegion().equals("State")) {
                    loadStateTaxInfo(taxes.get(t));
                } else if (taxes.get(t).getTaxTypeObj().getTaxRegion().getRegion().equals("City")) {
                    loadCityTaxInfo(taxes.get(t));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void loadFederalTaxInfo(EmployeeTax empTax) {
        federalStatusTxt.setText(empTax.getMarriageStatus());
        federalExemptionTxt.setText(empTax.getExemptions() + "");
        federalWIthholdingTxt.setText(empTax.getAdditionalWithholding().doubleValue() + "");
    }

    private void loadStateTaxInfo(EmployeeTax empTax) {
        stateCodeTxt.setText(empTax.getTaxTypeObj().getTaxName());
        stateStatusTxt.setText(empTax.getMarriageStatus());
        stateExemptionTxt.setText(empTax.getExemptions() + "");
        stateWithholdingTxt.setText(empTax.getAdditionalWithholding().doubleValue() + "");
        stateId.setText(empTax.getTaxTypeObj().getTaxTypeId().toString());
    }

    private void loadCityTaxInfo(EmployeeTax empTax) {
        cityCodeTxt.setText(empTax.getTaxTypeObj().getTaxName());
        cityStatusTxt.setText(empTax.getMarriageStatus());
        cityExemptionTxt.setText(empTax.getExemptions() + "");
        cityWithholdingTxt.setText(empTax.getAdditionalWithholding().doubleValue() + "");
        cityId.setText(empTax.getTaxTypeObj().getTaxTypeId().toString());
    }

    @Override
    public void loadData(final Record_Set rs) {
        Thread loadBillingData = new Thread() {
            @Override
            public void run() {
                loadEmployeeRateCode();
                loadEmployeePayments();
                loadEmployeeDeductions();
                loadEmployeeWages();
                loadEmployeeAccount();
                loadTaxInfo();
                
                Employee selectedEmployee = (Employee) myParent.getSelectedObject();
                employeeHealthCare.setData(selectedEmployee.getEmployeeId());
                
                try {
                    subContractorChk.setSelected(selectedEmployee.getIsSubContractor());
                } catch (Exception exe) {}
                
                try {
                    healthCareModel.clearData();
                    HealthCareController healthController = HealthCareController.getInstance(myParent.cpny);
                    ArrayList<EmployeeHealthcare> healthData = healthController.getHealthcareHistory(selectedEmployee.getEmployeeId());
                    for (int h = 0; h < healthData.size(); h++) {
                        healthCareModel.addHealthcare(healthData.get(h));
                    }
                } catch (Exception exe) {}

                try {
                    SalesTax selectedTax = new SalesTax();
                    selectedTax.setSalesTaxId(rs.getInt("sales_tax_id"));

                    ClientBillFrequency billFrequency = new ClientBillFrequency();
                    billFrequency.setClientBillFrequencyId(rs.getInt("client_bill_frequency_id"));

                } catch (Exception e) {
                }
            }
        };
        loadBillingData.start();
    }

    @Override
    public boolean needsMoreRecordSets() {
        return false;
    }

    @Override
    public String getMyTabTitle() {
        return "Payroll";
    }

    @Override
    public JPanel getMyForm() {
        return this;
    }

    @Override
    public void doOnClear() {
        subContractorChk.setSelected(false);
        allowDirectDeposit.setSelected(false);
        routingText.setText("");
        accountText.setText("");
        accountTypeCombo.setSelectedIndex(0);
        this.toggleDirectDeposit(false);

        stateCodeTxt.setText("");
        cityCodeTxt.setText("");
        federalStatusTxt.setText("");
        stateStatusTxt.setText("");
        cityStatusTxt.setText("");
        federalExemptionTxt.setText("");
        stateExemptionTxt.setText("");
        cityExemptionTxt.setText("");
        federalWIthholdingTxt.setText("");
        stateWithholdingTxt.setText("");
        cityWithholdingTxt.setText("");
    }

    @Override
    public boolean userHasAccess() {
        return true;
    }
    
    private class HealthCareHistory extends AbstractTableModel {

        private ArrayList<EmployeeHealthcare> empHealthcare = null;
        
        public HealthCareHistory() {
            empHealthcare = new ArrayList<EmployeeHealthcare>();
        }
        
        public void addHealthcare(EmployeeHealthcare care) {
            empHealthcare.add(care);
            super.fireTableDataChanged();
        }
        
        public int getRowCount() {
            return empHealthcare.size();
        }

        public int getColumnCount() {
            return 3;
        }

        public void clearData() {
            empHealthcare.clear();
            super.fireTableDataChanged();
        }
        
        @Override
        public String getColumnName(int columnIndex) {
            if (columnIndex == 0) {
                return "Activated On";
            } else if (columnIndex == 1) {
                return "Plan";
            } else {
                return "Inactivated On";
            }
        }
        
        public Object getValueAt(int rowIndex, int columnIndex) {
            EmployeeHealthcare health = empHealthcare.get(rowIndex);
            if (columnIndex == 0) {
                return health.getSetOn();
            } else if (columnIndex == 1) {
                return health.getOption(myParent.cpny).getName();
            } else {
                return health.getInactiveOn();
            }
        }
        
    }
}
